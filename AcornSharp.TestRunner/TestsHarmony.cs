using AcornSharp.Nodes;

namespace AcornSharp.TestRunner
{
    internal static class TestsHarmony
    {
        public static void Run()
        {
            /*
              Tests below were automatically converted from https://github.com/ariya/esprima/blob/2bb17ef9a45c88e82d72c2c61b7b7af93caef028/test/harmonytest.js.
            
              Manually fixed locations for:
               - parenthesized expressions (include brackets into expression's location)
               - expression statements (excluded spaces after statement's semicolon)
               - arrow and method functions (included arguments into function's location)
               - template elements (excluded '`', '${' and '}' from element's location)
            */

            // ES6 Unicode Code Point Escape Sequence

            Program.test("\"\\u{714E}\\u{8336}\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "煎茶",
                            raw = "\"\\u{714E}\\u{8336}\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("\"\\u{20BB7}\\u{91CE}\\u{5BB6}\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "𠮷野家",
                            raw = "\"\\u{20BB7}\\u{91CE}\\u{5BB6}\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 27
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Numeric Literal

            Program.test("00", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 0,
                            raw = "00",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 2
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 2
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 2
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0o0", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 0,
                            raw = "0o0",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function test() {'use strict'; 0o0; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "test",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = "use strict",
                                        raw = "'use strict'",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 0,
                                        raw = "0o0",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 35
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 37
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 37
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 37
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0o2", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 2,
                            raw = "0o2",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0o12", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 10,
                            raw = "0o12",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0O0", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 0,
                            raw = "0O0",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function test() {'use strict'; 0O0; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "test",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = "use strict",
                                        raw = "'use strict'",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 0,
                                        raw = "0O0",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 35
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 37
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 37
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 37
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0O2", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 2,
                            raw = "0O2",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0O12", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 10,
                            raw = "0O12",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0b0", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 0,
                            raw = "0b0",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0b1", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 1,
                            raw = "0b1",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0b10", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 2,
                            raw = "0b10",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0B0", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 0,
                            raw = "0B0",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0B1", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 1,
                            raw = "0B1",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("0B10", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 2,
                            raw = "0B10",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6 Template Strings

            Program.test("`42`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        raw = "42",
                                        cooked = "42"
                                    },
                                    tail = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 3
                                        }
                                    }
                                }
                            },
                            expressions = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("raw`42`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TaggedTemplateExpressionNode),
                            tag = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "raw",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    }
                                }
                            },
                            quasi = new TestNode
                            {
                                type = typeof(TemplateLiteralNode),
                                quasis = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(TemplateElementNode),
                                        value = new TestNode
                                        {
                                            raw = "42",
                                            cooked = "42"
                                        },
                                        tail = true,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            }
                                        }
                                    }
                                },
                                expressions = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 7
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 7
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("raw`hello ${name}`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TaggedTemplateExpressionNode),
                            tag = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "raw",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    }
                                }
                            },
                            quasi = new TestNode
                            {
                                type = typeof(TemplateLiteralNode),
                                quasis = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(TemplateElementNode),
                                        value = new TestNode
                                        {
                                            raw = "hello ",
                                            cooked = "hello "
                                        },
                                        tail = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(TemplateElementNode),
                                        value = new TestNode
                                        {
                                            raw = "",
                                            cooked = ""
                                        },
                                        tail = true,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    }
                                },
                                expressions = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "name",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`$`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        raw = "$",
                                        cooked = "$"
                                    },
                                    tail = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                }
                            },
                            expressions = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 3
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 3
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`\\n\\r\\b\\v\\t\\f\\\n\\\r\n`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        raw = "\\n\\r\\b\\v\\t\\f\\\n\\\n",
                                        cooked = "\n\r\b\u000b\t\f"
                                    },
                                    tail = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 3,
                                            column = 0
                                        }
                                    }
                                }
                            },
                            expressions = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 3,
                                    column = 1
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 3,
                                column = 1
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 3,
                        column = 1
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`\n\r\n\r`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        raw = "\n\n\n",
                                        cooked = "\n\n\n"
                                    },
                                    tail = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 4,
                                            column = 0
                                        }
                                    }
                                }
                            },
                            expressions = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 4,
                                    column = 1
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 4,
                                column = 1
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 4,
                        column = 1
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`\\u{000042}\\u0042\\x42u0\\A`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        raw = "\\u{000042}\\u0042\\x42u0\\A",
                                        cooked = "BBBu0A"
                                    },
                                    tail = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                }
                            },
                            expressions = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 26
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 26
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("new raw`42`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(NewExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(TaggedTemplateExpressionNode),
                                tag = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "raw",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        }
                                    }
                                },
                                quasi = new TestNode
                                {
                                    type = typeof(TemplateLiteralNode),
                                    quasis = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                raw = "42",
                                                cooked = "42"
                                            },
                                            tail = true,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        }
                                    },
                                    expressions = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    }
                                }
                            },
                            arguments = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 11
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 11
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 11
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`outer${{x: {y: 10}}}bar${`nested${function(){return 1;}}endnest`}end`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            expressions = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x"
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(ObjectExpressionNode),
                                                properties = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(PropertyNode),
                                                        method = false,
                                                        shorthand = false,
                                                        computed = false,
                                                        key = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "y"
                                                        },
                                                        value = new TestNode
                                                        {
                                                            type = typeof(LiteralNode),
                                                            value = 10,
                                                            raw = "10"
                                                        },
                                                        kind = PropertyKind.Init,
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(TemplateLiteralNode),
                                    expressions = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            generator = false,
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(ReturnStatementNode),
                                                        argument = new TestNode
                                                        {
                                                            type = typeof(LiteralNode),
                                                            value = 1,
                                                            raw = "1"
                                                        }
                                                    }
                                                }
                                            },
                                            expression = false
                                        }
                                    },
                                    quasis = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "nested",
                                                raw = "nested"
                                            },
                                            tail = false
                                        },
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "endnest",
                                                raw = "endnest"
                                            },
                                            tail = true
                                        }
                                    }
                                }
                            },
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        cooked = "outer",
                                        raw = "outer"
                                    },
                                    tail = false
                                },
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        cooked = "bar",
                                        raw = "bar"
                                    },
                                    tail = false
                                },
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    value = new TestNode
                                    {
                                        cooked = "end",
                                        raw = "end"
                                    },
                                    tail = true
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });


            // ES6: Switch Case Declaration

            Program.test("switch (answer) { case 42: let t = 42; break; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(SwitchStatementNode),
                        discriminant = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "answer",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                }
                            }
                        },
                        cases = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(SwitchCaseNode),
                                test = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 42,
                                    raw = "42",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 23
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                consequent = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(VariableDeclarationNode),
                                        declarations = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(VariableDeclaratorNode),
                                                id = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "t",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 31
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 32
                                                        }
                                                    }
                                                },
                                                init = new TestNode
                                                {
                                                    type = typeof(LiteralNode),
                                                    value = 42,
                                                    raw = "42",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 35
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 37
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 31
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 37
                                                    }
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Let,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 38
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(BreakStatementNode),
                                        label = null,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 39
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 45
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 45
                                    }
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 47
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 47
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Arrow Function

            Program.test("() => \"test\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = "test",
                                raw = "\"test\"",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("e => \"test\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = "test",
                                raw = "\"test\"",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 11
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 11
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 11
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(e) => \"test\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = "test",
                                raw = "\"test\"",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(a, b) => \"test\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "b",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = "test",
                                raw = "\"test\"",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 16
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 16
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("e => { 42; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 42,
                                            raw = "42",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("e => ({ property: 42 })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "property",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 42,
                                            raw = "42",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 23
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 23
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 23
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("e => { label: 42 }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(LabelledStatementNode),
                                        label = new TestNode {
                                            type = typeof(IdentifierNode),
                                            name = "label",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(ExpressionStatementNode),
                                            expression = new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                value = 42,
                                                raw = "42",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(a, b) => { 42; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "b",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 42,
                                            raw = "42",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("([a, , b]) => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 2
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                }
                                            }
                                        },
                                        null,
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "b",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 16
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 16
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("([a.a]) => 42", "Assigning to rvalue (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("() => {}()", "Unexpected token (1:8)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(a) => {}()", "Unexpected token (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("a => {}()", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("console.log(typeof () => {});", "Unexpected token (1:20)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(() => {})()", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            start = 0,
                            end = 12,
                            callee = new TestNode
                            {
                                type = typeof(ArrowFunctionExpressionNode),
                                id = null,
                                @params = new TestNode[0],
                                body = new TestNode
                                {
                                    type = typeof(BlockStatementNode),
                                    body = new TestNode[0],
                                    start = 7,
                                    end = 9,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                generator = false,
                                expression = false,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    }
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("((() => {}))()", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            start = 0,
                            end = 14,
                            callee = new TestNode
                            {
                                type = typeof(ArrowFunctionExpressionNode),
                                id = null,
                                @params = new TestNode[0],
                                body = new TestNode
                                {
                                    type = typeof(BlockStatementNode),
                                    body = new TestNode[0],
                                    start = 8,
                                    end = 10,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                },
                                generator = false,
                                expression = false,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 2
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    }
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });


            Program.test("(x=1) => x * x", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(AssignmentPatternNode),
                                    left = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            }
                                        }
                                    },
                                    right = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 1,
                                        raw = "1",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BinaryExpressionNode),
                                @operator = "*",
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("eval => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "eval",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 8
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 10
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 10
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("arguments => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "arguments",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 15
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 15
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(a) => 00", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 0,
                                raw = "00",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 9
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 9
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(eval, a) => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "eval",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 15
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 15
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(eval = 10) => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(AssignmentPatternNode),
                                    left = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "eval",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            }
                                        }
                                    },
                                    right = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 10,
                                        raw = "10",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(eval, a = 10) => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "eval",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(AssignmentPatternNode),
                                    left = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            }
                                        }
                                    },
                                    right = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 10,
                                        raw = "10",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 42,
                                raw = "42",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 20
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 20
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(x => x)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 8
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 8
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x => y => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(ArrowFunctionExpressionNode),
                                id = null,
                                @params = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "y",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            }
                                        }
                                    }
                                },
                                body = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 42,
                                    raw = "42",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                generator = false,
                                expression = true,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(x) => ((y, z) => (x, y, z))", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(ArrowFunctionExpressionNode),
                                id = null,
                                @params = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "y",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "z",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        }
                                    }
                                },
                                body = new TestNode
                                {
                                    type = typeof(SequenceExpressionNode),
                                    expressions = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 22
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 23
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "z",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 26
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 26
                                        }
                                    }
                                },
                                generator = false,
                                expression = true,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 8
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 27
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 28
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 28
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("foo(() => {})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "foo",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    }
                                }
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ArrowFunctionExpressionNode),
                                    id = null,
                                    @params = new TestNode[0],
                                    body = new TestNode
                                    {
                                        type = typeof(BlockStatementNode),
                                        body = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    generator = false,
                                    expression = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("foo((x, y) => {})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "foo",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 3
                                    }
                                }
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ArrowFunctionExpressionNode),
                                    id = null,
                                    @params = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        }
                                    },
                                    body = new TestNode
                                    {
                                        type = typeof(BlockStatementNode),
                                        body = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            }
                                        }
                                    },
                                    generator = false,
                                    expression = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Method Definition

            Program.test("x = { method() { } }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "method",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 20
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 20
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { method(test) { } }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "method",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "test",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 13
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 17
                                                        }
                                                    }
                                                }
                                            },
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 19
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 22
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 24
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 24
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 24
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 24
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { 'method'() { } }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = "method",
                                            raw = "'method'",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 20
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { get() { } }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "get",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { set() { } }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "set",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { method() { super.a(); } }", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 31
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 31
                                }
                            },
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 31
                                    }
                                },
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        },
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "method"
                                        },
                                        kind = PropertyKind.Init,
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            },
                                            id = null,
                                            expression = false,
                                            generator = false,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 29
                                                    }
                                                },
                                                body = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(ExpressionStatementNode),
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 17
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 27
                                                            },
                                                        },
                                                        expression = new TestNode
                                                        {
                                                            type = typeof(CallExpressionNode),
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 17
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 26
                                                                }
                                                            },
                                                            callee = new TestNode
                                                            {
                                                                type = typeof(MemberExpressionNode),
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 17
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 24
                                                                    }
                                                                },
                                                                @object = new TestNode
                                                                {
                                                                    type = typeof(SuperNode),
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 17
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 22
                                                                        }
                                                                    }
                                                                },
                                                                property = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 23
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 24
                                                                        }
                                                                    },
                                                                    name = "a"
                                                                },
                                                                computed = false
                                                            },
                                                            arguments = new TestNode[0]
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6,
                locations = true
            });

            Program.testFail("x = { method() { super(); } }", "super() call outside constructor of a subclass (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });

            // Harmony: Object Literal Property Value Shorthand

            Program.test("x = { y, z }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "z",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "z",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // Harmony: Destructuring

            Program.test("[a, b] = [b, a]", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ArrayExpressionNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 15
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 15
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("[a.r] = b", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 9,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 9,
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            start = 0,
                            end = 9,
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                start = 0,
                                end = 5,
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(MemberExpressionNode),
                                        start = 1,
                                        end = 4,
                                        @object = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 1,
                                            end = 2,
                                            name = "a"
                                        },
                                        property = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 3,
                                            end = 4,
                                            name = "r"
                                        },
                                        computed = false
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 8,
                                end = 9,
                                name = "b"
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let [a,,b] = c", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 14,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        start = 0,
                        end = 14,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                start = 4,
                                end = 14,
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    start = 4,
                                    end = 10,
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 5,
                                            end = 6,
                                            name = "a"
                                        },
                                        null,
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 8,
                                            end = 9,
                                            name = "b"
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 13,
                                    end = 14,
                                    name = "c"
                                }
                            }
                        },
                        kind = PropertyKind.Let
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("({ responseText: text } = res)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ObjectPatternNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "responseText",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "text",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 21
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 23
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "res",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 26
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 29
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 29
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 30
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 30
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("const {a} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Const,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("const [a] = []", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    elements = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Const,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("let {a} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Let,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("let [a] = []", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    elements = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Let,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var {a} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [a] = []", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    elements = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("const {a:b} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 9
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 10
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Const,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 16
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 16
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("let {a:b} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Let,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var {a:b} = {}", new TestNode
            {
                type = typeof(ProgramNode),
                sourceType = SourceType.Script,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // Harmony: Modules

            Program.test("export var document", new TestNode
            {
                type = typeof(ProgramNode),
                sourceType = SourceType.Module,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "document",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    init = null,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Var,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 19
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 19
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 19
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export var document = { }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "document",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    init = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        properties = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Var,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 25
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 25
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 25
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.testFail("export var await", "Can not use keyword 'await' outside an async function (1:11)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("export let document", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "document",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    init = null,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Let,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 19
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 19
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 19
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export let document = { }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "document",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    init = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        properties = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Let,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 25
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 25
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 25
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export const document = { }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "document",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        }
                                    },
                                    init = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        properties = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Const,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 27
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export function parse() { }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(FunctionDeclarationNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "parse",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 21
                                    }
                                }
                            },
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 24
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 27
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 27
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export class Class {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(ClassDeclarationNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "Class",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                }
                            },
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 21
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                }
                            }
                        },
                        specifiers = new TestNode[0],
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 21
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 21
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.testFail("export new Foo();", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export typeof foo;", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("export default 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = 42,
                            raw = "42",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export default function () {}", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    29
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        range = new int[]
                        {
                            0,
                            29
                        },
                        declaration = new TestNode
                        {
                            type = typeof(FunctionDeclarationNode),
                            range = new int[]
                            {
                                15,
                                29
                            },
                            id = null,
                            generator = false,
                            expression = false,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                range = new int[]
                                {
                                    27,
                                    29
                                },
                                body = new TestNode[0]
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true
            });

            Program.test("export default function f() {}", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    30
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        range = new int[]
                        {
                            0,
                            30
                        },
                        declaration = new TestNode
                        {
                            type = typeof(FunctionDeclarationNode),
                            range = new int[]
                            {
                                15,
                                30
                            },
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                range = new int[]
                                {
                                    24,
                                    25
                                },
                                name = "f"
                            },
                            generator = false,
                            expression = false,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                range = new int[]
                                {
                                    28,
                                    30
                                },
                                body = new TestNode[0]
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true
            });

            Program.test("export default class {}", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    23
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        range = new int[]
                        {
                            0,
                            23
                        },
                        declaration = new TestNode
                        {
                            type = typeof(ClassDeclarationNode),
                            range = new int[]
                            {
                                15,
                                23
                            },
                            id = null,
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                range = new int[]
                                {
                                    21,
                                    23
                                },
                                body = new TestNode[0]
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true
            });

            Program.test("export default class A {}", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    25
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        range = new int[]
                        {
                            0,
                            25
                        },
                        declaration = new TestNode
                        {
                            type = typeof(ClassDeclarationNode),
                            range = new int[]
                            {
                                15,
                                25
                            },
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                range = new int[]
                                {
                                    21,
                                    22
                                },
                                name = "A"
                            },
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                range = new int[]
                                {
                                    23,
                                    25
                                },
                                body = new TestNode[0]
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true
            });

            Program.test("export default (class{});", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(ClassExpressionNode),
                            id = null,
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[0]
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("export *", "Unexpected token (1:8)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("export * from \"crypto\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportAllDeclarationNode),
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "crypto",
                            raw = "\"crypto\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export { encrypt }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = null,
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            }
                        },
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export { encrypt, decrypt }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = null,
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "decrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "decrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    }
                                }
                            }
                        },
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export { encrypt as default }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = null,
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "default",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 27
                                    }
                                }
                            }
                        },
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 29
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 29
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export { encrypt, decrypt as dec }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = null,
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "dec",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 32
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "decrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 32
                                    }
                                }
                            }
                        },
                        source = null,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 34
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 34
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("export { default } from \"other\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportNamedDeclarationNode),
                        declaration = null,
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ExportSpecifierNode),
                                exported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "default",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "default",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 24
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 31
                                }
                            },
                            value = "other",
                            raw = "\"other\""
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 31
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 31
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.testFail("export { default }", "Unexpected keyword 'default' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export { if }", "Unexpected keyword 'if' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export { default as foo }", "Unexpected keyword 'default' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export { if as foo }", "Unexpected keyword 'if' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("import \"jquery\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[0],
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "jquery",
                            raw = "\"jquery\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 15
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 15
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("import $ from \"jquery\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportDefaultSpecifierNode),
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "$",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 8
                                    }
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "jquery",
                            raw = "\"jquery\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("import { encrypt, decrypt } from \"crypto\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                imported = new TestNode {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                imported = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "decrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "decrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    }
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "crypto",
                            raw = "\"crypto\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 41
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 41
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 41
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("import { encrypt as enc } from \"crypto\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                imported = new TestNode {
                                    type = typeof(IdentifierNode),
                                    name = "encrypt",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "enc",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 23
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 23
                                    }
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "crypto",
                            raw = "\"crypto\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 31
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 39
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 39
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 39
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("import crypto, { decrypt, encrypt as enc } from \"crypto\"", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 56
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 56
                            }
                        },
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportDefaultSpecifierNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 7
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        }
                                    },
                                    name = "crypto"
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 24
                                    }
                                },
                                imported = new TestNode {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        }
                                    },
                                    name = "decrypt"
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        }
                                    },
                                    name = "decrypt"
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 26
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 40
                                    }
                                },
                                imported = new TestNode {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 26
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 33
                                        }
                                    },
                                    name = "encrypt"
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 37
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 40
                                        }
                                    },
                                    name = "enc"
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 48
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 56
                                }
                            },
                            value = "crypto",
                            raw = "\"crypto\""
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.testFail("import default from \"foo\"", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("import { null as nil } from \"bar\"", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportSpecifierNode),
                                imported = new TestNode {
                                    type = typeof(IdentifierNode),
                                    name = "null",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        }
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "nil",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "bar",
                            raw = "\"bar\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("import * as crypto from \"crypto\"", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 32
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 32
                            }
                        },
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportNamespaceSpecifierNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                },
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    },
                                    name = "crypto"
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 24
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 32
                                }
                            },
                            value = "crypto",
                            raw = "\"crypto\""
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.testFail("import { class } from 'foo'", "Unexpected keyword 'class' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import { class, var } from 'foo'", "Unexpected keyword 'class' (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import { a as class } from 'foo'", "Unexpected keyword 'class' (1:14)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import * as class from 'foo'", "Unexpected keyword 'class' (1:12)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import { enum } from 'foo'", "The keyword 'enum' is reserved (1:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import { a as enum } from 'foo'", "The keyword 'enum' is reserved (1:14)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("import * as enum from 'foo'", "The keyword 'enum' is reserved (1:12)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("() => { class a extends b { static get prototype(){} } }", "Classes may not have a static property named prototype (1:39)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class a extends b { static set prototype(){} }", "Classes may not have a static property named prototype (1:31)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class a { static prototype(){} }", "Classes may not have a static property named prototype (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });


            // Harmony: Yield Expression

            Program.test("(function* () { yield v })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(YieldExpressionNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    }
                                                }
                                            },
                                            @delegate = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 23
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    }
                                }
                            },
                            generator = true,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 25
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 26
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 26
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("(function* () { yield\nv })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(YieldExpressionNode),
                                            argument = null,
                                            @delegate = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 21
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "v",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 2,
                                                    column = 0
                                                },
                                                end = new TestNode
                                                {
                                                    line = 2,
                                                    column = 1
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 2,
                                                column = 0
                                            },
                                            end = new TestNode
                                            {
                                                line = 2,
                                                column = 1
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    },
                                    end = new TestNode
                                    {
                                        line = 2,
                                        column = 3
                                    }
                                }
                            },
                            generator = true,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 2,
                                    column = 3
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 2,
                                column = 4
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 2,
                        column = 4
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                ranges = true,
                locations = true
            });

            Program.test("(function* () { yield *v })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(YieldExpressionNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 24
                                                    }
                                                }
                                            },
                                            @delegate = true,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 24
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 26
                                    }
                                }
                            },
                            generator = true,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function* test () { yield *v }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "test",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                }
                            }
                        },
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(YieldExpressionNode),
                                        argument = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "v",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 28
                                                }
                                            }
                                        },
                                        @delegate = true,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 28
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 30
                                }
                            }
                        },
                        generator = true,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 30
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 30
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var x = { *test () { yield *v } };", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "test",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 11
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(FunctionExpressionNode),
                                                id = null,
                                                @params = new TestNode[0],
                                                body = new TestNode
                                                {
                                                    type = typeof(BlockStatementNode),
                                                    body = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(ExpressionStatementNode),
                                                            expression = new TestNode
                                                            {
                                                                type = typeof(YieldExpressionNode),
                                                                argument = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "v",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 28
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 29
                                                                        }
                                                                    }
                                                                },
                                                                @delegate = true,
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 21
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 29
                                                                    }
                                                                }
                                                            },
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 21
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 29
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 19
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 31
                                                        }
                                                    }
                                                },
                                                generator = true,
                                                expression = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 31
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = true,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 33
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 33
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 34
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 34
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function* foo() { console.log(yield); }", new TestNode
            {
                body = new TestNode[]
                {
                    new TestNode
                    {
                        id = new TestNode
                        {
                            name = "foo",
                            type = typeof(IdentifierNode),
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    expression = new TestNode
                                    {
                                        callee = new TestNode
                                        {
                                            @object = new TestNode
                                            {
                                                name = "console",
                                                type = typeof(IdentifierNode),
                                            },
                                            property = new TestNode
                                            {
                                                name = "log",
                                                type = typeof(IdentifierNode),
                                            },
                                            computed = false,
                                            type = typeof(MemberExpressionNode),
                                        },
                                        arguments = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                @delegate = false,
                                                argument = null,
                                                type = typeof(YieldExpressionNode),
                                            }
                                        },
                                        type = typeof(CallExpressionNode),
                                    },
                                    type = typeof(ExpressionStatementNode),
                                }
                            },
                            type = typeof(BlockStatementNode),
                        },
                        type = typeof(FunctionDeclarationNode),
                    }
                },
                sourceType = SourceType.Script,
                type = typeof(ProgramNode)
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function* t() {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "t",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 11
                                }
                            }
                        },
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                }
                            }
                        },
                        generator = true,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 16
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 16
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(function* () { yield yield 10 })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(YieldExpressionNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(YieldExpressionNode),
                                                argument = new TestNode
                                                {
                                                    type = typeof(LiteralNode),
                                                    value = 10,
                                                    raw = "10",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 28
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 30
                                                        }
                                                    }
                                                },
                                                @delegate = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 30
                                                    }
                                                }
                                            },
                                            @delegate = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 30
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 30
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 32
                                    }
                                }
                            },
                            generator = true,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 32
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("function *g() { (x = yield) => {} }", "Yield expression cannot be a default value (1:21)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function *g() { ({x = yield}) => {} }", "Yield expression cannot be a default value (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            // Harmony: Iterators

            Program.test("for(x of list) process(x);", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForOfStatementNode),
                        left = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "x",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 4
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 5
                                }
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "list",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ExpressionStatementNode),
                            expression = new TestNode
                            {
                                type = typeof(CallExpressionNode),
                                callee = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "process",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 15
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 22
                                        }
                                    }
                                },
                                arguments = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 26
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 26
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("for (var x of list) process(x);", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForOfStatementNode),
                        left = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    init = null,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Var,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 5
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "list",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ExpressionStatementNode),
                            expression = new TestNode
                            {
                                type = typeof(CallExpressionNode),
                                callee = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "process",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    }
                                },
                                arguments = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 30
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 31
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 31
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 31
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("for (var x = 42 of list) process(x);", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForOfStatementNode),
                        left = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    init = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 42,
                                        raw = "42",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 15
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Var,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 5
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "list",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 19
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 23
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ExpressionStatementNode),
                            expression = new TestNode
                            {
                                type = typeof(CallExpressionNode),
                                callee = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "process",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 32
                                        }
                                    }
                                },
                                arguments = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 33
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 35
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 25
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 36
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 36
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 36
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("for (let x of list) process(x);", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForOfStatementNode),
                        left = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    init = null,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                }
                            },
                            kind = PropertyKind.Let,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 5
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "list",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ExpressionStatementNode),
                            expression = new TestNode
                            {
                                type = typeof(CallExpressionNode),
                                callee = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "process",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    }
                                },
                                arguments = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 30
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 31
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 31
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 31
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // Harmony: Class (strawman)

            Program.test("var A = class extends B {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "A",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ClassExpressionNode),
                                    superClass = new TestNode {
                                        type = typeof(IdentifierNode),
                                        name = "B",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            }
                                        }
                                    },
                                    body = new TestNode
                                    {
                                        type = typeof(ClassBodyNode),
                                        body = new TestNode[0],
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 26
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 26
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 26
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 26
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A extends class B extends C {} {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = new TestNode {
                            type = typeof(ClassExpressionNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "B",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 23
                                    }
                                }
                            },
                            superClass = new TestNode {
                                type = typeof(IdentifierNode),
                                name = "C",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 32
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 33
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 34
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 36
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 36
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 37
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 39
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 39
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 39
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {get() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "get",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static get() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "get",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 23
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 25
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 26
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 26
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A extends B {get foo() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = new TestNode {
                            type = typeof(IdentifierNode),
                            name = "B",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 32
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 32
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 32
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A extends B { static get foo() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = new TestNode {
                            type = typeof(IdentifierNode),
                            name = "B",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 37
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 39
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 39
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 39
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 40
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 40
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 40
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {set a(v) {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 21
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 21
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static set a(v) {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 24
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 26
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 28
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 28
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 29
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 29
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 29
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {set(v) {};}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "set",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 13
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 20
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 20
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static set(v) {};}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "set",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 21
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 24
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 26
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 26
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 28
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 28
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {*gen(v) { yield v; }}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "gen",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(ExpressionStatementNode),
                                                    expression = new TestNode
                                                    {
                                                        type = typeof(YieldExpressionNode),
                                                        argument = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "v",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 25
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 26
                                                                }
                                                            }
                                                        },
                                                        @delegate = false,
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 19
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 26
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 19
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 27
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            }
                                        },
                                        generator = true,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 30
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 30
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 30
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static *gen(v) { yield v; }}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "gen",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(ExpressionStatementNode),
                                                    expression = new TestNode
                                                    {
                                                        type = typeof(YieldExpressionNode),
                                                        argument = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "v",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 33
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 34
                                                                }
                                                            }
                                                        },
                                                        @delegate = false,
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 27
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 34
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 27
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 35
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 37
                                                }
                                            }
                                        },
                                        generator = true,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 37
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 37
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 38
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 38
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 38
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("(class { *static x() {} })", "Unexpected token (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("(class { *static() {} })", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 24,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 24,
                        expression = new TestNode
                        {
                            type = typeof(ClassExpressionNode),
                            start = 1,
                            end = 23,
                            id = null,
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                start = 7,
                                end = 23,
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(MethodDefinitionNode),
                                        start = 9,
                                        end = 21,
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 10,
                                            end = 16,
                                            name = "static"
                                        },
                                        @static = false,
                                        kind = PropertyKind.Method,
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            start = 16,
                                            end = 21,
                                            id = null,
                                            generator = true,
                                            expression = false,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                start = 19,
                                                end = 21,
                                                body = new TestNode[0]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(class A {constructor() { super() }})", "super() call outside constructor of a subclass (1:26)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("\"use strict\"; (class A extends B {constructor() { super() }})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "use strict",
                            raw = "\"use strict\"",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    },
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ClassExpressionNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "A",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 21
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            },
                            superClass = new TestNode {
                                type = typeof(IdentifierNode),
                                name = "B",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 31
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 32
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(MethodDefinitionNode),
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "constructor",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 34
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 45
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[0],
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(ExpressionStatementNode),
                                                        expression = new TestNode
                                                        {
                                                            type = typeof(CallExpressionNode),
                                                            callee = new TestNode
                                                            {
                                                                type = typeof(SuperNode),
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 50
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 55
                                                                    }
                                                                }
                                                            },
                                                            arguments = new TestNode[0],
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 50
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 57
                                                                }
                                                            }
                                                        },
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 50
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 57
                                                            }
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 48
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 59
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 45
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 59
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Constructor,
                                        @static = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 59
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 33
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 60
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 60
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 14
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 61
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 61
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("(class A extends B { constructor() { function f() { super() } } })", "'super' keyword outside a method (1:52)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(class A extends B { constructor() { (() => { super() }); } })", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(class A extends B { method() { super() } })", "super() call outside constructor of a subclass (1:32)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class A {'constructor'() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = "constructor"
                                    },
                                    @static = false,
                                    kind = PropertyKind.Constructor,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        generator = false,
                                        expression = false,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0]
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class A { constructor() {} 'constructor'() {} }", "Duplicate constructor in the same class (1:27)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class A { get constructor() {} }", "Constructor can't have get/set modifier (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("class A { get ['constructor']() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 36,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        start = 0,
                        end = 36,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 6,
                            end = 7,
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            start = 8,
                            end = 36,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    start = 10,
                                    end = 34,
                                    @static = false,
                                    computed = true,
                                    key = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        start = 15,
                                        end = 28,
                                        value = "constructor",
                                        raw = "'constructor'"
                                    },
                                    kind = PropertyKind.Get,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        start = 29,
                                        end = 34,
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        expression = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            start = 32,
                                            end = 34,
                                            body = new TestNode[0]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class A { *constructor() {} }", "Constructor can't be a generator (1:11)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class A {static foo() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 22
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 24
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 25
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 25
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 25
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {foo() {} static bar() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "bar",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 33
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 33
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 33
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 34
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 34
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 34
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("\"use strict\"; (class A extends B { static constructor() { super() }})", "super() call outside constructor of a subclass (1:58)", new TestOptions
            {
                ecmaVersion = 6,
                loose = false
            });

            Program.test("class A { foo() {} bar() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "bar",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Method,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 28
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 28
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { get foo() {} set foo(v) {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 22
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 22
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 30
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 31
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 32
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 34
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 36
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 30
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 36
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 23
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 36
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 37
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 37
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 37
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static get foo() {} get foo() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 34
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 37
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 40
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 42
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 37
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 42
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 42
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 43
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 43
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 43
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static get foo() {} static get bar() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "bar",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 41
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 44
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 47
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 49
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 44
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 49
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 49
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 51
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 51
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 51
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static get foo() {} static set foo(v) {} get foo() {} set foo(v) {}}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 41
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 44
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 45
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 46
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 48
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 50
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 44
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 50
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 50
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 55
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 58
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 61
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 63
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 58
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 63
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 51
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 63
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 68
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 71
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 72
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 73
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 75
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 77
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 71
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 77
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 64
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 77
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 78
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 78
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 78
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });


            Program.test("class A { static [foo]() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 29
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 29
                            }
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 29
                                }
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 27
                                        }
                                    },
                                    @static = true,
                                    computed = true,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        },
                                        name = "foo"
                                    },
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            }
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                }
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { static get [foo]() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            },
                            range = new int[]
                            {
                                6,
                                7
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                }
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        }
                                    },
                                    @static = true,
                                    computed = true,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            }
                                        },
                                        name = "foo"
                                    },
                                    kind = PropertyKind.Get,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            }
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                }
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { set foo(v) {} get foo() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "A",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            }
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 19
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 21
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 23
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 23
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "foo",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 28
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 34
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 36
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 36
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    @static = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 36
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 38
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 38
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 38
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A { foo() {} get foo() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                }
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    },
                                    @static = false,
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        },
                                        name = "foo"
                                    },
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        }
                                    },
                                    @static = false,
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        },
                                        name = "foo"
                                    },
                                    kind = PropertyKind.Get,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            }
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                }
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class Semicolon { ; }", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 21
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 21
                            }
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            },
                            name = "Semicolon"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 16
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                }
                            },
                            body = new TestNode[0]
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Computed Properties

            Program.test("({[x]: 10})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 10,
                                        raw = "10",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 11
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 11
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({[\"x\" + \"y\"]: 10})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(BinaryExpressionNode),
                                        @operator = "+",
                                        left = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = "x",
                                            raw = "\"x\"",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = "y",
                                            raw = "\"y\"",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 10,
                                        raw = "10",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 19
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 19
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({[x]: function() {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 20
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({[x]: 10, y: 20})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 10,
                                        raw = "10",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "y",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        value = 20,
                                        raw = "20",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({get [x]() {}, set [x](v) {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Get,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 22
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "v",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 24
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 25
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 23
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 29
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Set,
                                    method = false,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 29
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 30
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 31
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 31
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({[x]() {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = true,
                                    shorthand = false,
                                    computed = true,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 11
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var {[x]: y} = {y}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "y",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 10
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 11
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = true,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 11
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "y",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "y",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 15
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function f({[x]: y}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ObjectPatternNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = false,
                                        computed = true,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 23
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 23
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 23
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var x = {*[test]() { yield *v; }}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "x",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "test",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 11
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(FunctionExpressionNode),
                                                id = null,
                                                @params = new TestNode[0],
                                                body = new TestNode
                                                {
                                                    type = typeof(BlockStatementNode),
                                                    body = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(ExpressionStatementNode),
                                                            expression = new TestNode
                                                            {
                                                                type = typeof(YieldExpressionNode),
                                                                argument = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "v",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 28
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 29
                                                                        }
                                                                    }
                                                                },
                                                                @delegate = true,
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 21
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 29
                                                                    }
                                                                }
                                                            },
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 21
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 30
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 19
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 32
                                                        }
                                                    }
                                                },
                                                generator = true,
                                                expression = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 16
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 32
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = true,
                                            shorthand = false,
                                            computed = true,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 32
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 33
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 33
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("class A {[x]() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 6
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 7
                                }
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        }
                                    },
                                    @static = false,
                                    computed = true,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 10
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            }
                                        },
                                        name = "x"
                                    },
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("({[x]})", "Unexpected token (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            // ES6: Default parameters

            Program.test("function f([x] = [1]) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                left = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 1,
                                            raw = "1",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 24
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 24
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 24
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function f([x] = [1]) { 'use strict' }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                left = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 1,
                                            raw = "1",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 36
                                        }
                                    },
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 36
                                            }
                                        },
                                        value = "use strict",
                                        raw = "'use strict'"
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 38
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 38
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 38
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function f({x} = {x: 10}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                left = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 13
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 13
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 19
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                value = 10,
                                                raw = "10",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 21
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 23
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 24
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 28
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 28
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("f = function({x} = {x: 10}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "f",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(FunctionExpressionNode),
                                id = null,
                                @params = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(AssignmentPatternNode),
                                        left = new TestNode
                                        {
                                            type = typeof(ObjectPatternNode),
                                            properties = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(PropertyNode),
                                                    key = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "x",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 14
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 15
                                                            }
                                                        }
                                                    },
                                                    value = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "x",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 14
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 15
                                                            }
                                                        }
                                                    },
                                                    kind = PropertyKind.Init,
                                                    method = false,
                                                    shorthand = true,
                                                    computed = false,
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 14
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 15
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                }
                                            }
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(ObjectExpressionNode),
                                            properties = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(PropertyNode),
                                                    key = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "x",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 20
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 21
                                                            }
                                                        }
                                                    },
                                                    value = new TestNode
                                                    {
                                                        type = typeof(LiteralNode),
                                                        value = 10,
                                                        raw = "10",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 23
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 25
                                                            }
                                                        }
                                                    },
                                                    kind = PropertyKind.Init,
                                                    method = false,
                                                    shorthand = false,
                                                    computed = false,
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 20
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 25
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 26
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        }
                                    }
                                },
                                body = new TestNode
                                {
                                    type = typeof(BlockStatementNode),
                                    body = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 28
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 30
                                        }
                                    }
                                },
                                generator = false,
                                expression = false,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 30
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 30
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 30
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 30
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({f: function({x} = {x: 10}) {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "f",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                left = new TestNode
                                                {
                                                    type = typeof(ObjectPatternNode),
                                                    properties = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(PropertyNode),
                                                            key = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 15
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 16
                                                                    }
                                                                }
                                                            },
                                                            value = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 15
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 16
                                                                    }
                                                                }
                                                            },
                                                            kind = PropertyKind.Init,
                                                            method = false,
                                                            shorthand = true,
                                                            computed = false,
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 15
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 16
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 14
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 17
                                                        }
                                                    }
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(ObjectExpressionNode),
                                                    properties = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(PropertyNode),
                                                            key = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 21
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 22
                                                                    }
                                                                }
                                                            },
                                                            value = new TestNode
                                                            {
                                                                type = typeof(LiteralNode),
                                                                value = 10,
                                                                raw = "10",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 24
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 26
                                                                    }
                                                                }
                                                            },
                                                            kind = PropertyKind.Init,
                                                            method = false,
                                                            shorthand = false,
                                                            computed = false,
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 21
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 26
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 20
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 27
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 27
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 29
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 31
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 31
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = false,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 31
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 32
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({f({x} = {x: 10}) {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "f",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                left = new TestNode
                                                {
                                                    type = typeof(ObjectPatternNode),
                                                    properties = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(PropertyNode),
                                                            key = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 5
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 6
                                                                    }
                                                                }
                                                            },
                                                            value = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 5
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 6
                                                                    }
                                                                }
                                                            },
                                                            kind = PropertyKind.Init,
                                                            method = false,
                                                            shorthand = true,
                                                            computed = false,
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 5
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 6
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 4
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 7
                                                        }
                                                    }
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(ObjectExpressionNode),
                                                    properties = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(PropertyNode),
                                                            key = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                name = "x",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 11
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 12
                                                                    }
                                                                }
                                                            },
                                                            value = new TestNode
                                                            {
                                                                type = typeof(LiteralNode),
                                                                value = 10,
                                                                raw = "10",
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 14
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 16
                                                                    }
                                                                }
                                                            },
                                                            kind = PropertyKind.Init,
                                                            method = false,
                                                            shorthand = false,
                                                            computed = false,
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 11
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 16
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 10
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 17
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 21
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 21
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = true,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 21
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 23
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 23
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(class {f({x} = {x: 10}) {}})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ClassExpressionNode),
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(MethodDefinitionNode),
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "f",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(AssignmentPatternNode),
                                                    left = new TestNode
                                                    {
                                                        type = typeof(ObjectPatternNode),
                                                        properties = new TestNode[]
                                                        {
                                                            new TestNode
                                                            {
                                                                type = typeof(PropertyNode),
                                                                key = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "x",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 11
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 12
                                                                        }
                                                                    }
                                                                },
                                                                value = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "x",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 11
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 12
                                                                        }
                                                                    }
                                                                },
                                                                kind = PropertyKind.Init,
                                                                method = false,
                                                                shorthand = true,
                                                                computed = false,
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 11
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 12
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 13
                                                            }
                                                        }
                                                    },
                                                    right = new TestNode
                                                    {
                                                        type = typeof(ObjectExpressionNode),
                                                        properties = new TestNode[]
                                                        {
                                                            new TestNode
                                                            {
                                                                type = typeof(PropertyNode),
                                                                key = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "x",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 17
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 18
                                                                        }
                                                                    }
                                                                },
                                                                value = new TestNode
                                                                {
                                                                    type = typeof(LiteralNode),
                                                                    value = 10,
                                                                    raw = "10",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 20
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 22
                                                                        }
                                                                    }
                                                                },
                                                                kind = PropertyKind.Init,
                                                                method = false,
                                                                shorthand = false,
                                                                computed = false,
                                                                loc = new TestNode
                                                                {
                                                                    start = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 17
                                                                    },
                                                                    end = new TestNode
                                                                    {
                                                                        line = 1,
                                                                        column = 22
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 16
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 23
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 10
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 23
                                                        }
                                                    }
                                                }
                                            },
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 25
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 27
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 27
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Method,
                                        @static = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 27
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 28
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 28
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 29
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 29
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(({x} = {x: 10}) => {})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(AssignmentPatternNode),
                                    left = new TestNode
                                    {
                                        type = typeof(ObjectPatternNode),
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "x",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 3
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 4
                                                        }
                                                    }
                                                },
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "x",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 3
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 4
                                                        }
                                                    }
                                                },
                                                kind = PropertyKind.Init,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            }
                                        }
                                    },
                                    right = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "x",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 9
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 10
                                                        }
                                                    }
                                                },
                                                value = new TestNode
                                                {
                                                    type = typeof(LiteralNode),
                                                    value = 10,
                                                    raw = "10",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 12
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 14
                                                        }
                                                    }
                                                },
                                                kind = PropertyKind.Init,
                                                method = false,
                                                shorthand = false,
                                                computed = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 9
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    }
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 15
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 23
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 23
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = function(y = 1) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(FunctionExpressionNode),
                                id = null,
                                @params = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(AssignmentPatternNode),
                                        left = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            value = 1,
                                            raw = "1",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 18
                                            }
                                        }
                                    }
                                },
                                body = new TestNode
                                {
                                    type = typeof(BlockStatementNode),
                                    body = new TestNode[0],
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 22
                                        }
                                    }
                                },
                                generator = false,
                                expression = false,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function f(a = 1) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 1,
                                    raw = "1",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 15
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 20
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 20
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { f: function(a=1) {} }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "f",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(AssignmentPatternNode),
                                                    left = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 18
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 19
                                                            }
                                                        }
                                                    },
                                                    right = new TestNode
                                                    {
                                                        type = typeof(LiteralNode),
                                                        value = 1,
                                                        raw = "1",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 20
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 21
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 18
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 21
                                                        }
                                                    }
                                                }
                                            },
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 23
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 25
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 25
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 27
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 27
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("x = { f(a=1) {} }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 1
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(ObjectExpressionNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "f",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(FunctionExpressionNode),
                                            id = null,
                                            @params = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(AssignmentPatternNode),
                                                    left = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 8
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 9
                                                            }
                                                        }
                                                    },
                                                    right = new TestNode
                                                    {
                                                        type = typeof(LiteralNode),
                                                        value = 1,
                                                        raw = "1",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 11
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 8
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 11
                                                        }
                                                    }
                                                }
                                            },
                                            body = new TestNode
                                            {
                                                type = typeof(BlockStatementNode),
                                                body = new TestNode[0],
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 13
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            generator = false,
                                            expression = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = true,
                                        shorthand = false,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 6
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 17
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Rest parameters

            Program.test("function f(a, ...b) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "a",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            new TestNode
                            {
                                type = typeof(RestElementNode),
                                argument = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "b",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: Destructured Parameters

            Program.test("function x([ a, b ]){}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "x",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("function x({ a, b }){}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "x",
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ObjectPatternNode),
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 14
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "b",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        },
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "b",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        },
                                        kind = PropertyKind.Init,
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 17
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0],
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 22
                                }
                            }
                        },
                        generator = false,
                        expression = false,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("function x(...[ a, b ]){}", "Unexpected token (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(([...[ a, b ]]) => {})", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){}", "Unexpected token (1:42)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(function ({ a(){} }) {})", "Unexpected token (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(function x([ a, b ]){})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    }
                                }
                            },
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "b",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 21
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 23
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 23
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 24
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 24
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(function x({ a, b }){})", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    }
                                }
                            },
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 14
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 21
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 23
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 23
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 24
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 24
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("(function x(...[ a, b ]){})", "Unexpected token (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var a = { set foo(...v) {} };", "Setter cannot use rest params (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class a { set foo(...v) {} };", "Setter cannot use rest params (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(function x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){})", "Unexpected token (1:43)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("({ x([ a, b ]){} })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(ArrayPatternNode),
                                                elements = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 7
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 8
                                                            }
                                                        }
                                                    },
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "b",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 11
                                                            }
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 13
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 16
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = true,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 3
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 19
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 19
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({ x(...[ a, b ]){} })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(RestElementNode),
                                                argument = new TestNode
                                                {
                                                    type = typeof(ArrayPatternNode),
                                                    elements = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "a",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 10
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 11
                                                                }
                                                            }
                                                        },
                                                        new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "b",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 13
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 14
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 8
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 16
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = true,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 3
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 19
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 21
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 7,
                ranges = true,
                locations = true
            });

            Program.test("({ x({ a: { w, x }, b: [y, z] }, ...[a, b, c]){} })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 3
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            }
                                        }
                                    },
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        id = null,
                                        @params = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(ObjectPatternNode),
                                                properties = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(PropertyNode),
                                                        key = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "a",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 7
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 8
                                                                }
                                                            }
                                                        },
                                                        value = new TestNode
                                                        {
                                                            type = typeof(ObjectPatternNode),
                                                            properties = new TestNode[]
                                                            {
                                                                new TestNode
                                                                {
                                                                    type = typeof(PropertyNode),
                                                                    key = new TestNode
                                                                    {
                                                                        type = typeof(IdentifierNode),
                                                                        name = "w",
                                                                        loc = new TestNode
                                                                        {
                                                                            start = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 12
                                                                            },
                                                                            end = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 13
                                                                            }
                                                                        }
                                                                    },
                                                                    value = new TestNode
                                                                    {
                                                                        type = typeof(IdentifierNode),
                                                                        name = "w",
                                                                        loc = new TestNode
                                                                        {
                                                                            start = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 12
                                                                            },
                                                                            end = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 13
                                                                            }
                                                                        }
                                                                    },
                                                                    kind = PropertyKind.Init,
                                                                    method = false,
                                                                    shorthand = true,
                                                                    computed = false,
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 12
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 13
                                                                        }
                                                                    }
                                                                },
                                                                new TestNode
                                                                {
                                                                    type = typeof(PropertyNode),
                                                                    key = new TestNode
                                                                    {
                                                                        type = typeof(IdentifierNode),
                                                                        name = "x",
                                                                        loc = new TestNode
                                                                        {
                                                                            start = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 15
                                                                            },
                                                                            end = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 16
                                                                            }
                                                                        }
                                                                    },
                                                                    value = new TestNode
                                                                    {
                                                                        type = typeof(IdentifierNode),
                                                                        name = "x",
                                                                        loc = new TestNode
                                                                        {
                                                                            start = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 15
                                                                            },
                                                                            end = new TestNode
                                                                            {
                                                                                line = 1,
                                                                                column = 16
                                                                            }
                                                                        }
                                                                    },
                                                                    kind = PropertyKind.Init,
                                                                    method = false,
                                                                    shorthand = true,
                                                                    computed = false,
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 15
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 16
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 10
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 18
                                                                }
                                                            }
                                                        },
                                                        kind = PropertyKind.Init,
                                                        method = false,
                                                        shorthand = false,
                                                        computed = false,
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 7
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 18
                                                            }
                                                        }
                                                    },
                                                    new TestNode
                                                    {
                                                        type = typeof(PropertyNode),
                                                        key = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "b",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 20
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 21
                                                                }
                                                            }
                                                        },
                                                        value = new TestNode
                                                        {
                                                            type = typeof(ArrayPatternNode),
                                                            elements = new TestNode[]
                                                            {
                                                                new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "y",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 24
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 25
                                                                        }
                                                                    }
                                                                },
                                                                new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    name = "z",
                                                                    loc = new TestNode
                                                                    {
                                                                        start = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 27
                                                                        },
                                                                        end = new TestNode
                                                                        {
                                                                            line = 1,
                                                                            column = 28
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 23
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 29
                                                                }
                                                            }
                                                        },
                                                        kind = PropertyKind.Init,
                                                        method = false,
                                                        shorthand = false,
                                                        computed = false,
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 20
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 29
                                                            }
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 5
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 31
                                                    }
                                                }
                                            },
                                            new TestNode
                                            {
                                                type = typeof(RestElementNode),
                                                argument = new TestNode
                                                {
                                                    type = typeof(ArrayPatternNode),
                                                    elements = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "a",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 37
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 38
                                                                }
                                                            }
                                                        },
                                                        new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "b",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 40
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 41
                                                                }
                                                            }
                                                        },
                                                        new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            name = "c",
                                                            loc = new TestNode
                                                            {
                                                                start = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 43
                                                                },
                                                                end = new TestNode
                                                                {
                                                                    line = 1,
                                                                    column = 44
                                                                }
                                                            }
                                                        }
                                                    },
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 36
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 45
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            body = new TestNode[0],
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 46
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 48
                                                }
                                            }
                                        },
                                        generator = false,
                                        expression = false,
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 48
                                            }
                                        }
                                    },
                                    kind = PropertyKind.Init,
                                    method = true,
                                    shorthand = false,
                                    computed = false,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 3
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 48
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 50
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 51
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 51
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 7,
                ranges = true,
                locations = true
            });

            Program.test("(...a) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(RestElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 12
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 12
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 12
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("(a, ...b) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 2
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(RestElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 7
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 15
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 15
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 15
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 15
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({ a }) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 4
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 11
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({ a }, ...b) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 4
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(RestElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 19
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 19
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 19
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.testFail("(...[a, b]) => {}", "Unexpected token (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(a, ...[b]) => {}", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("({ a: [a, b] }, ...c) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(ArrayPatternNode),
                                                elements = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 7
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 8
                                                            }
                                                        }
                                                    },
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "b",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 11
                                                            }
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(RestElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "c",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 19
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 20
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 25
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 27
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 27
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({ a: b, c }, [d, e], ...f) => {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 3
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "c",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 9
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 10
                                                    }
                                                }
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "c",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 9
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 10
                                                    }
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 10
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "d",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 16
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "e",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 18
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(RestElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "f",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 25
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 26
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[0],
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 31
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 33
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 33
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 33
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // ES6: SpreadElement

            Program.test("[...a] = b", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(RestElementNode),
                                        argument = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 4
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 5
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 6
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "b",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 10
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 10
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 10
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("[a, ...b] = c", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(RestElementNode),
                                        argument = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "b",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "c",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 12
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("[{ a, b }, ...c] = d", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ObjectPatternNode),
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "a",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 3
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 4
                                                        }
                                                    }
                                                },
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "a",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 3
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 4
                                                        }
                                                    }
                                                },
                                                kind = PropertyKind.Init,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 3
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 4
                                                    }
                                                }
                                            },
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "b",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 6
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 7
                                                        }
                                                    }
                                                },
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "b",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 6
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 7
                                                        }
                                                    }
                                                },
                                                kind = PropertyKind.Init,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 6
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 7
                                                    }
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(RestElementNode),
                                        argument = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "c",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 14
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 16
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "d",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 19
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 20
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 20
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 20
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 20
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("[a, ...[b, c]] = d", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 1
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 2
                                            }
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(RestElementNode),
                                        argument = new TestNode
                                        {
                                            type = typeof(ArrayPatternNode),
                                            elements = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "b",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 8
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 9
                                                        }
                                                    }
                                                },
                                                new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    name = "c",
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 11
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 12
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 7
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 4
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 13
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "d",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 18
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 18
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 18
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 18
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [...a] = b", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(RestElementNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "a",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 8
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 9
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 9
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "b",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [a, ...b] = c", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(RestElementNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "b",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 11
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 12
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 12
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "c",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 16
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 17
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 17
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 17
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 17
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [{ a, b }, ...c] = d", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(ObjectPatternNode),
                                            properties = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(PropertyNode),
                                                    key = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 7
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 8
                                                            }
                                                        }
                                                    },
                                                    value = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "a",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 7
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 8
                                                            }
                                                        }
                                                    },
                                                    kind = PropertyKind.Init,
                                                    method = false,
                                                    shorthand = true,
                                                    computed = false,
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 7
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 8
                                                        }
                                                    }
                                                },
                                                new TestNode
                                                {
                                                    type = typeof(PropertyNode),
                                                    key = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "b",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 11
                                                            }
                                                        }
                                                    },
                                                    value = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "b",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 10
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 11
                                                            }
                                                        }
                                                    },
                                                    kind = PropertyKind.Init,
                                                    method = false,
                                                    shorthand = true,
                                                    computed = false,
                                                    loc = new TestNode
                                                    {
                                                        start = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 10
                                                        },
                                                        end = new TestNode
                                                        {
                                                            line = 1,
                                                            column = 11
                                                        }
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 13
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(RestElementNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "c",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 18
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 19
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 19
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 20
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "d",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 23
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 24
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 24
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 24
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 24
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [a, ...[b, c]] = d", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "a",
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 5
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 6
                                                }
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(RestElementNode),
                                            argument = new TestNode
                                            {
                                                type = typeof(ArrayPatternNode),
                                                elements = new TestNode[]
                                                {
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "b",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 12
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 13
                                                            }
                                                        }
                                                    },
                                                    new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        name = "c",
                                                        loc = new TestNode
                                                        {
                                                            start = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 15
                                                            },
                                                            end = new TestNode
                                                            {
                                                                line = 1,
                                                                column = 16
                                                            }
                                                        }
                                                    }
                                                },
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 11
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 17
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 8
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 17
                                                }
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 18
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "d",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 21
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 22
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 22
                                    }
                                }
                            }
                        },
                        kind = PropertyKind.Var,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 22
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 22
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 7,
                ranges = true,
                locations = true
            });

            Program.test("func(...a)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "func",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    }
                                }
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(SpreadElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "a",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 10
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 10
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 10
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("func(a, ...b)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "func",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    }
                                }
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "a",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 6
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(SpreadElementNode),
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "b",
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 11
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 12
                                            }
                                        }
                                    },
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 8
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("func(...a, b)", new TestNode
            {
                type = typeof(ProgramNode),
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        },
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 13
                                }
                            },
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    }
                                },
                                name = "func"
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(SpreadElementNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    },
                                    argument = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 8
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 9
                                            }
                                        },
                                        name = "a"
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 11
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        }
                                    },
                                    name = "b"
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("/[a-z]/u", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            regex = new TestNode
                            {
                                pattern = "[a-z]",
                                flags = "u"
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 8
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                locations = true,
                ecmaVersion = 6
            });

            Program.test("/[\\uD834\\uDF06-\\uD834\\uDF08a-z]/u", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            regex = new TestNode
                            {
                                pattern = "[\\uD834\\uDF06-\\uD834\\uDF08a-z]",
                                flags = "u"
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 33
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                locations = true,
                ecmaVersion = 6
            });

            Program.test("do {} while (false) foo();", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 26,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(DoWhileStatementNode),
                        start = 0,
                        end = 19,
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 3,
                            end = 5,
                            body = new TestNode[0]
                        },
                        test = new TestNode
                        {
                            type = typeof(LiteralNode),
                            start = 13,
                            end = 18,
                            value = false,
                            raw = "false"
                        }
                    },
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 20,
                        end = 26,
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            start = 20,
                            end = 25,
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 20,
                                end = 23,
                                name = "foo"
                            },
                            arguments = new TestNode[0]
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // Harmony Invalid syntax

            Program.testFail("0o", "Expected number in radix 8 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0o1a", "Identifier directly after number (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0o9", "Expected number in radix 8 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0o18", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0O", "Expected number in radix 8 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0O1a", "Identifier directly after number (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0O9", "Expected number in radix 8 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0O18", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0b", "Expected number in radix 2 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0b1a", "Identifier directly after number (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0b9", "Expected number in radix 2 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0b18", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0b12", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0B", "Expected number in radix 2 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0B1a", "Identifier directly after number (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0B9", "Expected number in radix 2 (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0B18", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("0B12", "Unexpected token (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"\\u{110000}\"", "Code point out of bounds (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"\\u{}\"", "Bad character escape sequence (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"\\u{FFFF\"", "Bad character escape sequence (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"\\u{FFZ}\"", "Bad character escape sequence (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[v] += ary", "Assigning to rvalue (1:0)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[2] = 42", "Assigning to rvalue (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ obj:20 }) = 42", "Parenthesized pattern (1:0)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("( { get x() {} } = 0)", "Object pattern can't contain getter or setter (1:8)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("x \n is y", "Unexpected token (2:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("x \n isnt y", "Unexpected token (2:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function default() {}", "Unexpected keyword 'default' (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function hello() {'use strict'; ({ i: 10, s(eval) { } }); }", "Binding eval in strict mode (1:44)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function a() { \"use strict\"; ({ b(t, t) { } }); }", "Argument name clash (1:37)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var super", "Unexpected keyword 'super' (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var default", "Unexpected keyword 'default' (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let default", "Unexpected keyword 'default' (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("const default", "Unexpected keyword 'default' (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; ({ v: eval } = obj)", "Assigning to eval in strict mode (1:20)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; ({ v: arguments } = obj)", "Assigning to arguments in strict mode (1:20)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (let x = 42 in list) process(x);", "Unexpected token (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (let x = 42 of list) process(x);", "Unexpected token (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("import foo", "Unexpected token (1:10)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("import { foo, bar }", "Unexpected token (1:19)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("import foo from bar", "Unexpected token (1:16)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("((a)) => 42", "Parenthesized pattern (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(a, (b)) => 42", "Parenthesized pattern (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (eval = 10) => 42", "Assigning to eval in strict mode (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; eval => 42", "Binding eval in strict mode (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; arguments => 42", "Binding arguments in strict mode (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (eval, a) => 42", "Binding eval in strict mode (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (arguments, a) => 42", "Binding arguments in strict mode (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (eval, a = 10) => 42", "Binding eval in strict mode (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(a, a) => 42", "Argument name clash (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function foo(a, a = 2) {}", "Argument name clash (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (a, a) => 42", "Argument name clash (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (a) => 00", "Invalid number (1:21)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("() <= 42", "Unexpected token (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(10) => 00", "Assigning to rvalue (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(10, 20) => 00", "Assigning to rvalue (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("yield v", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("yield 10", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("void { [1, 2]: 3 };", "Unexpected token (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let [this] = [10]", "Unexpected keyword 'this' (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("let {this} = x", "Unexpected keyword 'this' (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("let [function] = [10]", "Unexpected keyword 'function' (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("let [function] = x", "Unexpected keyword 'function' (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("([function] = [10])", "Unexpected token (1:10)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("([this] = [10])", "Assigning to rvalue (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("({this} = x)", "Unexpected keyword 'this' (1:2)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var x = {this}", "Unexpected keyword 'this' (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("yield* 10", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(BinaryExpressionNode),
                            @operator = "*",
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "yield",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 0
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 10,
                                raw = "10",
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 7
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 9
                                    }
                                }
                            },
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 9
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 9
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 9
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                loose = false,
                ranges = true,
                locations = true
            });

            Program.test("e => yield* 10", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            id = null,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "e",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 0
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 1
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BinaryExpressionNode),
                                @operator = "*",
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "yield",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 5
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 10
                                        }
                                    }
                                },
                                right = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 10,
                                    raw = "10",
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 14
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 5
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 14
                                    }
                                }
                            },
                            generator = false,
                            expression = true,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 0
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 14
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 14
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 14
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                loose = false,
                ranges = true,
                locations = true
            });

            Program.testFail("(function () { yield 10 })", "Unexpected token (1:21)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(function () { yield* 10 })", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(FunctionExpressionNode),
                            id = null,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                body = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(ExpressionStatementNode),
                                        expression = new TestNode
                                        {
                                            type = typeof(BinaryExpressionNode),
                                            @operator = "*",
                                            left = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "yield",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 15
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 20
                                                    }
                                                }
                                            },
                                            right = new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                value = 10,
                                                raw = "10",
                                                loc = new TestNode
                                                {
                                                    start = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 22
                                                    },
                                                    end = new TestNode
                                                    {
                                                        line = 1,
                                                        column = 24
                                                    }
                                                }
                                            },
                                            loc = new TestNode
                                            {
                                                start = new TestNode
                                                {
                                                    line = 1,
                                                    column = 15
                                                },
                                                end = new TestNode
                                                {
                                                    line = 1,
                                                    column = 24
                                                }
                                            }
                                        },
                                        loc = new TestNode
                                        {
                                            start = new TestNode
                                            {
                                                line = 1,
                                                column = 15
                                            },
                                            end = new TestNode
                                            {
                                                line = 1,
                                                column = 24
                                            }
                                        }
                                    }
                                },
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 26
                                    }
                                }
                            },
                            generator = false,
                            expression = false,
                            loc = new TestNode
                            {
                                start = new TestNode
                                {
                                    line = 1,
                                    column = 1
                                },
                                end = new TestNode
                                {
                                    line = 1,
                                    column = 26
                                }
                            }
                        },
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 27
                            }
                        }
                    }
                },
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 27
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                loose = false,
                ranges = true,
                locations = true
            });

            Program.test("let + 1", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(BinaryExpressionNode),
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "let"
                            },
                            @operator = "+",
                            right = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 1,
                                raw = "1"
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var let = 1", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "let"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 1,
                                    raw = "1"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("'use strict'; let + 1", "The keyword 'let' is reserved (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("if (1) let\n{}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var yield = 2", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "yield"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 2,
                                    raw = "2"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(function() { \"use strict\"; f(yield v) })", "The keyword 'yield' is reserved (1:30)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var obj = { *test** }", "Unexpected token (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class A extends yield B { }", "Unexpected token (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class default", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("`test", "Unterminated template (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("switch `test`", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("`hello ${10 `test`", "Unexpected token (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("`hello ${10;test`", "Unexpected token (1:11)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function a() 1 // expression closure is not supported", "Unexpected token (1:13)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ \"chance\" }) = obj", "Unexpected token (1:12)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ 42 }) = obj", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function f(a, ...b, c)", "Comma is not permitted after the rest element (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function f(a, ...b = 0)", "Unexpected token (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(([a, ...b = 0]) => {})", "Rest elements cannot have a default value (1:9)", new TestOptions
            {
                ecmaVersion = 7
            });
            Program.testFail("[a, ...b = 0] = []", "Rest elements cannot have a default value (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function x(...{ a }){}", "Unexpected token (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; function x(a, { a }){}", "Argument name clash (1:30)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; function x({ b: { a } }, [{ b: { a } }]){}", "Argument name clash (1:47)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; function x(a, ...[a]){}", "Unexpected token (1:31)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(...a, b) => {}", "Comma is not permitted after the rest element (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("([ 5 ]) => {}", "Assigning to rvalue (1:3)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ 5 }) => {}", "Unexpected token (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(...[ 5 ]) => {}", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 7
            });

            Program.test("[...{ a }] = b", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[...a, b] = c", "Comma is not permitted after the rest element (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ t(eval) { \"use strict\"; } });", "Binding eval in strict mode (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; `${test}\\02`;", "Octal literal in template string (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (1) import \"acorn\";", "'import' and 'export' may only appear at the top level (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[...a, ] = b", "Comma is not permitted after the rest element (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (b,...a, );", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(b, ...a)", "Unexpected token (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("switch (cond) { case 10: let a = 20; ", "Unexpected token (1:37)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("\"use strict\"; (eval) => 42", "Binding eval in strict mode (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(eval) => { \"use strict\"; 42 }", "Binding eval in strict mode (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ get test() { } }) => 42", "Object pattern can't contain getter or setter (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });

            /* Regression tests */

            // # https://github.com/acornjs/acorn/issues/127
            Program.test("doSmth(`${x} + ${y} = ${x + y}`)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(CallExpressionNode),
                            callee = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "doSmth"
                            },
                            arguments = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateLiteralNode),
                                    expressions = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x"
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "y"
                                        },
                                        new TestNode
                                        {
                                            type = typeof(BinaryExpressionNode),
                                            left = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "x"
                                            },
                                            @operator = "+",
                                            right = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "y"
                                            }
                                        }
                                    },
                                    quasis = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "",
                                                raw = ""
                                            },
                                            tail = false
                                        },
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = " + ",
                                                raw = " + "
                                            },
                                            tail = false
                                        },
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = " = ",
                                                raw = " = "
                                            },
                                            tail = false
                                        },
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "",
                                                raw = ""
                                            },
                                            tail = true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // # https://github.com/acornjs/acorn/issues/129
            Program.test("function normal(x, y = 10) {}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "normal"
                        },
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x"
                            },
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "y"
                                },
                                right = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    value = 10,
                                    raw = "10"
                                }
                            }
                        },
                        generator = false,
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[0]
                        },
                        expression = false
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // test preserveParens option with arrow functions
            Program.test("() => 42", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            expression = true
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                preserveParens = true
            });

            // https://github.com/acornjs/acorn/issues/161
            Program.test("import foo, * as bar from 'baz';", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ImportDeclarationNode),
                        specifiers = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(ImportDefaultSpecifierNode),
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "foo"
                                }
                            },
                            new TestNode
                            {
                                type = typeof(ImportNamespaceSpecifierNode),
                                local = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "bar"
                                }
                            }
                        },
                        source = new TestNode
                        {
                            type = typeof(LiteralNode),
                            value = "baz",
                            raw = "'baz'"
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            // https://github.com/acornjs/acorn/issues/173
            Program.test("`{${x}}`, `}`", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(SequenceExpressionNode),
                            expressions = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateLiteralNode),
                                    expressions = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "x"
                                        }
                                    },
                                    quasis = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "{",
                                                raw = "{"
                                            },
                                            tail = false
                                        },
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "}",
                                                raw = "}"
                                            },
                                            tail = true
                                        }
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(TemplateLiteralNode),
                                    expressions = new TestNode[0],
                                    quasis = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(TemplateElementNode),
                                            value = new TestNode
                                            {
                                                cooked = "}",
                                                raw = "}"
                                            },
                                            tail = true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/186
            Program.test("var {get} = obj;", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "get"
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                name = "get"
                                            }
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "obj"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // Destructuring defaults (https://github.com/acornjs/acorn/issues/181)

            Program.test("var {propName: localVar = defaultValue} = obj", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    45
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        range = new int[]
                        {
                            0,
                            45
                        },
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                range = new int[]
                                {
                                    4,
                                    45
                                },
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    range = new int[]
                                    {
                                        4,
                                        39
                                    },
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            range = new int[]
                                            {
                                                5,
                                                38
                                            },
                                            method = false,
                                            shorthand = false,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    13
                                                },
                                                name = "propName"
                                            },
                                            value = new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                range = new int[]
                                                {
                                                    15,
                                                    38
                                                },
                                                left = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        15,
                                                        23
                                                    },
                                                    name = "localVar"
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        26,
                                                        38
                                                    },
                                                    name = "defaultValue"
                                                }
                                            },
                                            kind = PropertyKind.Init,
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    range = new int[]
                                    {
                                        42,
                                        45
                                    },
                                    name = "obj"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var {propName = defaultValue} = obj", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    35
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        range = new int[]
                        {
                            0,
                            35
                        },
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                range = new int[]
                                {
                                    4,
                                    35
                                },
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    range = new int[]
                                    {
                                        4,
                                        29
                                    },
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            range = new int[]
                                            {
                                                5,
                                                28
                                            },
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    13
                                                },
                                                name = "propName"
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    28
                                                },
                                                left = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        5,
                                                        13
                                                    },
                                                    name = "propName"
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        16,
                                                        28
                                                    },
                                                    name = "defaultValue"
                                                }
                                            }
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    range = new int[]
                                    {
                                        32,
                                        35
                                    },
                                    name = "obj"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var {get = defaultValue} = obj", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    30
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        range = new int[]
                        {
                            0,
                            30
                        },
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                range = new int[]
                                {
                                    4,
                                    30
                                },
                                id = new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    range = new int[]
                                    {
                                        4,
                                        24
                                    },
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            range = new int[]
                                            {
                                                5,
                                                23
                                            },
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    8
                                                },
                                                name = "get"
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    23
                                                },
                                                left = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        5,
                                                        8
                                                    },
                                                    name = "get"
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        11,
                                                        23
                                                    },
                                                    name = "defaultValue"
                                                }
                                            }
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    range = new int[]
                                    {
                                        27,
                                        30
                                    },
                                    name = "obj"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("var [localVar = defaultValue] = obj", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    35
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        range = new int[]
                        {
                            0,
                            35
                        },
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                range = new int[]
                                {
                                    4,
                                    35
                                },
                                id = new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    range = new int[]
                                    {
                                        4,
                                        29
                                    },
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(AssignmentPatternNode),
                                            range = new int[]
                                            {
                                                5,
                                                28
                                            },
                                            left = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    13
                                                },
                                                name = "localVar"
                                            },
                                            right = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    16,
                                                    28
                                                },
                                                name = "defaultValue"
                                            }
                                        }
                                    }
                                },
                                init = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    range = new int[]
                                    {
                                        32,
                                        35
                                    },
                                    name = "obj"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("({x = 0} = obj)", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    15
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        range = new int[]
                        {
                            0,
                            15
                        },
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            range = new int[]
                            {
                                1,
                                14
                            },
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ObjectPatternNode),
                                range = new int[]
                                {
                                    1,
                                    8
                                },
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        range = new int[]
                                        {
                                            2,
                                            7
                                        },
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            range = new int[]
                                            {
                                                2,
                                                3
                                            },
                                            name = "x"
                                        },
                                        kind = PropertyKind.Init,
                                        value = new TestNode
                                        {
                                            type = typeof(AssignmentPatternNode),
                                            range = new int[]
                                            {
                                                2,
                                                7
                                            },
                                            left = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    2,
                                                    3
                                                },
                                                name = "x"
                                            },
                                            right = new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                range = new int[]
                                                {
                                                    6,
                                                    7
                                                },
                                                value = 0
                                            }
                                        }
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                range = new int[]
                                {
                                    11,
                                    14
                                },
                                name = "obj"
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true
            });

            Program.test("({x = 0}) => x", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    14
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        range = new int[]
                        {
                            0,
                            14
                        },
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            range = new int[]
                            {
                                0,
                                14
                            },
                            id = null,
                            generator = false,
                            expression = true,
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ObjectPatternNode),
                                    range = new int[]
                                    {
                                        1,
                                        8
                                    },
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            range = new int[]
                                            {
                                                2,
                                                7
                                            },
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                range = new int[]
                                                {
                                                    2,
                                                    3
                                                },
                                                name = "x"
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                type = typeof(AssignmentPatternNode),
                                                range = new int[]
                                                {
                                                    2,
                                                    7
                                                },
                                                left = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        2,
                                                        3
                                                    },
                                                    name = "x"
                                                },
                                                right = new TestNode
                                                {
                                                    type = typeof(LiteralNode),
                                                    range = new int[]
                                                    {
                                                        6,
                                                        7
                                                    },
                                                    value = 0
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                range = new int[]
                                {
                                    13,
                                    14
                                },
                                name = "x"
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true
            });

            Program.test("[a, {b: {c = 1}}] = arr", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    23
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        range = new int[]
                        {
                            0,
                            23
                        },
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            range = new int[]
                            {
                                0,
                                23
                            },
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(ArrayPatternNode),
                                range = new int[]
                                {
                                    0,
                                    17
                                },
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        range = new int[]
                                        {
                                            1,
                                            2
                                        },
                                        name = "a"
                                    },
                                    new TestNode
                                    {
                                        type = typeof(ObjectPatternNode),
                                        range = new int[]
                                        {
                                            4,
                                            16
                                        },
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                range = new int[]
                                                {
                                                    5,
                                                    15
                                                },
                                                method = false,
                                                shorthand = false,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    range = new int[]
                                                    {
                                                        5,
                                                        6
                                                    },
                                                    name = "b"
                                                },
                                                value = new TestNode
                                                {
                                                    type = typeof(ObjectPatternNode),
                                                    range = new int[]
                                                    {
                                                        8,
                                                        15
                                                    },
                                                    properties = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(PropertyNode),
                                                            range = new int[]
                                                            {
                                                                9,
                                                                14
                                                            },
                                                            method = false,
                                                            shorthand = true,
                                                            computed = false,
                                                            key = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                range = new int[]
                                                                {
                                                                    9,
                                                                    10
                                                                },
                                                                name = "c"
                                                            },
                                                            kind = PropertyKind.Init,
                                                            value = new TestNode
                                                            {
                                                                type = typeof(AssignmentPatternNode),
                                                                range = new int[]
                                                                {
                                                                    9,
                                                                    14
                                                                },
                                                                left = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    range = new int[]
                                                                    {
                                                                        9,
                                                                        10
                                                                    },
                                                                    name = "c"
                                                                },
                                                                right = new TestNode
                                                                {
                                                                    type = typeof(LiteralNode),
                                                                    range = new int[]
                                                                    {
                                                                        13,
                                                                        14
                                                                    },
                                                                    value = 1
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                kind = PropertyKind.Init,
                                            }
                                        }
                                    }
                                }
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                range = new int[]
                                {
                                    20,
                                    23
                                },
                                name = "arr"
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true
            });

            Program.test("for ({x = 0} in arr);", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    21
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForInStatementNode),
                        range = new int[]
                        {
                            0,
                            21
                        },
                        left = new TestNode
                        {
                            type = typeof(ObjectPatternNode),
                            range = new int[]
                            {
                                5,
                                12
                            },
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    range = new int[]
                                    {
                                        6,
                                        11
                                    },
                                    method = false,
                                    shorthand = true,
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        range = new int[]
                                        {
                                            6,
                                            7
                                        },
                                        name = "x"
                                    },
                                    kind = PropertyKind.Init,
                                    value = new TestNode
                                    {
                                        type = typeof(AssignmentPatternNode),
                                        range = new int[]
                                        {
                                            6,
                                            11
                                        },
                                        left = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            range = new int[]
                                            {
                                                6,
                                                7
                                            },
                                            name = "x"
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(LiteralNode),
                                            range = new int[]
                                            {
                                                10,
                                                11
                                            },
                                            value = 0
                                        }
                                    }
                                }
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            range = new int[]
                            {
                                16,
                                19
                            },
                            name = "arr"
                        },
                        body = new TestNode
                        {
                            type = typeof(EmptyStatementNode),
                            range = new int[]
                            {
                                20,
                                21
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true
            });

            Program.testFail("obj = {x = 0}", "Shorthand property assignments are valid only in destructuring patterns (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("f({x = 0})", "Shorthand property assignments are valid only in destructuring patterns (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(localVar |= defaultValue) => {}", "Only '=' operator can be used for specifying default value. (1:9)", new TestOptions
            {
                loose = false,
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/191

            Program.test("try {} catch ({message}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    27
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(TryStatementNode),
                        range = new int[]
                        {
                            0,
                            27
                        },
                        block = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            range = new int[]
                            {
                                4,
                                6
                            },
                            body = new TestNode[0]
                        },
                        handler = new TestNode
                        {
                            type = typeof(CatchClauseNode),
                            range = new int[]
                            {
                                7,
                                27
                            },
                            param = new TestNode {
                                type = typeof(ObjectPatternNode),
                                range = new int[]
                                {
                                    14,
                                    23
                                },
                                properties = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(PropertyNode),
                                        range = new int[]
                                        {
                                            15,
                                            22
                                        },
                                        method = false,
                                        shorthand = true,
                                        computed = false,
                                        key = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            range = new int[]
                                            {
                                                15,
                                                22
                                            },
                                            name = "message"
                                        },
                                        kind = PropertyKind.Init,
                                        value = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            range = new int[]
                                            {
                                                15,
                                                22
                                            },
                                            name = "message"
                                        }
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(BlockStatementNode),
                                range = new int[]
                                {
                                    25,
                                    27
                                },
                                body = new TestNode[0]
                            }
                        },
                        finaliser = null
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // https://github.com/acornjs/acorn/issues/192

            Program.test("class A { static() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    23
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        range = new int[]
                        {
                            0,
                            23
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            range = new int[]
                            {
                                6,
                                7
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            range = new int[]
                            {
                                8,
                                23
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    range = new int[]
                                    {
                                        10,
                                        21
                                    },
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        range = new int[]
                                        {
                                            10,
                                            16
                                        },
                                        name = "static"
                                    },
                                    @static = false,
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        range = new int[]
                                        {
                                            16,
                                            21
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = false,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            range = new int[]
                                            {
                                                19,
                                                21
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            // https://github.com/acornjs/acorn/issues/213

            Program.test("for (const x of list) process(x);", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForOfStatementNode),
                        left = new TestNode
                        {
                            type = typeof(VariableDeclarationNode),
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(VariableDeclaratorNode),
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        range = new int[]
                                        {
                                            11,
                                            12
                                        }
                                    },
                                    init = null,
                                    range = new int[]
                                    {
                                        11,
                                        12
                                    }
                                }
                            },
                            kind = PropertyKind.Const,
                            range = new int[]
                            {
                                5,
                                12
                            }
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "list",
                            range = new int[]
                            {
                                16,
                                20
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(ExpressionStatementNode),
                            expression = new TestNode
                            {
                                type = typeof(CallExpressionNode),
                                callee = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    name = "process",
                                    range = new int[]
                                    {
                                        22,
                                        29
                                    }
                                },
                                arguments = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        name = "x",
                                        range = new int[]
                                        {
                                            30,
                                            31
                                        }
                                    }
                                },
                                range = new int[]
                                {
                                    22,
                                    32
                                }
                            },
                            range = new int[]
                            {
                                22,
                                33
                            }
                        },
                        range = new int[]
                        {
                            0,
                            33
                        }
                    }
                },
                range = new int[]
                {
                    0,
                    33
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true
            });

            Program.test("class A { *static() {} }", new TestNode
            {
                type = typeof(ProgramNode),
                range = new int[]
                {
                    0,
                    24
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        range = new int[]
                        {
                            0,
                            24
                        },
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            range = new int[]
                            {
                                6,
                                7
                            },
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            range = new int[]
                            {
                                8,
                                24
                            },
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    range = new int[]
                                    {
                                        10,
                                        22
                                    },
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        range = new int[]
                                        {
                                            11,
                                            17
                                        },
                                        name = "static"
                                    },
                                    @static = false,
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        range = new int[]
                                        {
                                            17,
                                            22
                                        },
                                        id = null,
                                        @params = new TestNode[0],
                                        generator = true,
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            range = new int[]
                                            {
                                                20,
                                                22
                                            },
                                            body = new TestNode[0]
                                        },
                                        expression = false
                                    }
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                ranges = true,
                locations = true
            });

            Program.test("`${/\\d/.exec('1')[0]}`", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 22,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 22,
                        expression = new TestNode
                        {
                            type = typeof(TemplateLiteralNode),
                            start = 0,
                            end = 22,
                            expressions = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MemberExpressionNode),
                                    start = 3,
                                    end = 20,
                                    @object = new TestNode
                                    {
                                        type = typeof(CallExpressionNode),
                                        start = 3,
                                        end = 17,
                                        callee = new TestNode
                                        {
                                            type = typeof(MemberExpressionNode),
                                            start = 3,
                                            end = 12,
                                            @object = new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                start = 3,
                                                end = 7,
                                                regex = new TestNode
                                                {
                                                    pattern = "\\d",
                                                    flags = ""
                                                },
                                                raw = "/\\d/"
                                            },
                                            property = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                start = 8,
                                                end = 12,
                                                name = "exec"
                                            },
                                            computed = false
                                        },
                                        arguments = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(LiteralNode),
                                                start = 13,
                                                end = 16,
                                                value = "1",
                                                raw = "'1'"
                                            }
                                        }
                                    },
                                    property = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        start = 18,
                                        end = 19,
                                        value = 0,
                                        raw = "0"
                                    },
                                    computed = true
                                }
                            },
                            quasis = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    start = 1,
                                    end = 1,
                                    value = new TestNode
                                    {
                                        raw = "",
                                        cooked = ""
                                    },
                                    tail = false
                                },
                                new TestNode
                                {
                                    type = typeof(TemplateElementNode),
                                    start = 21,
                                    end = 21,
                                    value = new TestNode
                                    {
                                        raw = "",
                                        cooked = ""
                                    },
                                    tail = true
                                }
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var _𐒦 = 10;", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 13,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        start = 0,
                        end = 13,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                start = 4,
                                end = 12,
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 4,
                                    end = 7,
                                    name = "_𐒦"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    start = 10,
                                    end = 12,
                                    value = 10,
                                    raw = "10"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var 𫠝_ = 10;", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 13,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        start = 0,
                        end = 13,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                start = 4,
                                end = 12,
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 4,
                                    end = 7,
                                    name = "𫠝_"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    start = 10,
                                    end = 12,
                                    value = 10,
                                    raw = "10"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var _\\u{104A6} = 10;", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 20,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        start = 0,
                        end = 20,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                start = 4,
                                end = 19,
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 4,
                                    end = 14,
                                    name = "_𐒦"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    start = 17,
                                    end = 19,
                                    value = 10,
                                    raw = "10"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let [x,] = [1]", new TestNode
            {
                start = 0,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        start = 0,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                start = 4,
                                id = new TestNode
                                {
                                    start = 4,
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            start = 5,
                                            name = "x",
                                            type = typeof(IdentifierNode),
                                            end = 6
                                        }
                                    },
                                    type = typeof(ArrayPatternNode),
                                    end = 8
                                },
                                init = new TestNode
                                {
                                    start = 11,
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            start = 12,
                                            value = 1,
                                            raw = "1",
                                            type = typeof(LiteralNode),
                                            end = 13
                                        }
                                    },
                                    type = typeof(ArrayExpressionNode),
                                    end = 14
                                },
                                type = typeof(VariableDeclaratorNode),
                                end = 14
                            }
                        },
                        kind = PropertyKind.Let,
                        type = typeof(VariableDeclarationNode),
                        end = 14
                    }
                },
                type = typeof(ProgramNode),
                end = 14
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let {x} = y", new TestNode
            {
                start = 0,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        start = 0,
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                start = 4,
                                id = new TestNode
                                {
                                    start = 4,
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            start = 5,
                                            method = false,
                                            shorthand = true,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                start = 5,
                                                name = "x",
                                                type = typeof(IdentifierNode),
                                                end = 6
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                start = 5,
                                                name = "x",
                                                type = typeof(IdentifierNode),
                                                end = 6
                                            },
                                            type = typeof(PropertyNode),
                                            end = 6
                                        }
                                    },
                                    type = typeof(ObjectPatternNode),
                                    end = 7
                                },
                                init = new TestNode
                                {
                                    start = 10,
                                    name = "y",
                                    type = typeof(IdentifierNode),
                                    end = 11
                                },
                                type = typeof(VariableDeclaratorNode),
                                end = 11
                            }
                        },
                        kind = PropertyKind.Let,
                        type = typeof(VariableDeclarationNode),
                        end = 11
                    }
                },
                type = typeof(ProgramNode),
                end = 11
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("[x,,] = 1", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (var [name, value] in obj) {}", new TestNode
            {
                body = new TestNode[]
                {
                    new TestNode
                    {
                        left = new TestNode
                        {
                            declarations = new TestNode[]
                            {
                                new TestNode
                                {
                                    id = new TestNode
                                    {
                                        elements = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                name = "name",
                                                type = typeof(IdentifierNode)
                                            },
                                            new TestNode
                                            {
                                                name = "value",
                                                type = typeof(IdentifierNode)
                                            }
                                        },
                                        type = typeof(ArrayPatternNode)
                                    },
                                    init = null,
                                    type = typeof(VariableDeclaratorNode)
                                }
                            },
                            kind = PropertyKind.Var,
                            type = typeof(VariableDeclarationNode)
                        },
                        right = new TestNode
                        {
                            name = "obj",
                            type = typeof(IdentifierNode)
                        },
                        body = new TestNode
                        {
                            body = new TestNode[0],
                            type = typeof(BlockStatementNode)
                        },
                        type = typeof(ForInStatementNode)
                    }
                },
                sourceType = SourceType.Script,
                type = typeof(ProgramNode)
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let [x]", "Complex binding patterns require an initialization value (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var [x]", "Complex binding patterns require an initialization value (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var _𖫵 = 11;", "Unexpected character '𖫵' (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var 𫠞_ = 12;", "Unexpected character '𫠞' (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("var 𫠝_ = 10;", "Unexpected character '𫠝' (1:4)", new TestOptions
            {
                ecmaVersion = 5
            });
            Program.testFail("if (1) let x = 10;", "Unexpected token (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("for (;;) const x = 10;", "Unexpected token (1:9)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("while (1) function foo(){}", "Unexpected token (1:10)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("if (1) ; else class Cls {}", "Unexpected token (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("'use strict'; [...eval] = arr", "Assigning to eval in strict mode (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("'use strict'; ({eval = defValue} = obj)", "Assigning to eval in strict mode (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[...eval] = arr", "Assigning to eval in strict mode (1:4)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("function* y({yield}) {}", "Can not use 'yield' as identifier inside a generator (1:13)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function foo() { new.target; }", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "foo"
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(MetaPropertyNode),
                                        meta = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "new"
                                        },
                                        property = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            name = "target"
                                        }
                                    }
                                }
                            }
                        },
                        generator = false,
                        expression = false
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("new.prop", "The only valid meta property for new is new.target (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("new.target", "new.target can only be used in functions (1:0)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function x() { return () => new.target }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("let y = () => new.target", "new.target can only be used in functions (1:14)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("export default function foo() {} false", new TestNode
            {
                body = new TestNode[]
                {
                    new TestNode
                    {
                        declaration = new TestNode
                        {
                            id = new TestNode
                            {
                                name = "foo",
                                type = typeof(IdentifierNode)
                            },
                            generator = false,
                            expression = false,
                            @params = new TestNode[0],
                            body = new TestNode
                            {
                                body = new TestNode[0],
                                type = typeof(BlockStatementNode)
                            },
                            type = typeof(FunctionDeclarationNode)
                        },
                        type = typeof(ExportDefaultDeclarationNode)
                    },
                    new TestNode
                    {
                        expression = new TestNode
                        {
                            value = false,
                            raw = "false",
                            type = typeof(LiteralNode)
                        },
                        type = typeof(ExpressionStatementNode)
                    }
                },
                sourceType = SourceType.Module,
                type = typeof(ProgramNode)
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            // https://github.com/acornjs/acorn/issues/274

            Program.testFail("`\\07`", "Octal literal in template string (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(function(){ 'use strict'; '\\07'; })", "Octal literal in strict mode (1:28)", new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/277

            Program.testFail("x = { method() 42 }", "Unexpected token (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("x = { get method() 42 }", "Unexpected token (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("x = { set method(val) v = val }", "Unexpected token (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/278

            Program.testFail("/\\u{110000}/u", "~", new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/279

            Program.testFail("super", "'super' keyword outside a method (1:0)", new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/275

            Program.testFail("class A { get prop(x) {} }", "getter should have no params (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class A { set prop() {} }", "setter should have exactly one param (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class A { set prop(x, y) {} }", "setter should have exactly one param (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });

            // https://github.com/acornjs/acorn/issues/276

            Program.testFail("({ __proto__: 1, __proto__: 2 })", "Redefinition of __proto__ property (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("({ '__proto__': 1, __proto__: 2 })", "Redefinition of __proto__ property (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({ ['__proto__']: 1, __proto__: 2 })", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({ __proto__() { return 1 }, __proto__: 2 })", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({ get __proto__() { return 1 }, __proto__: 2 })", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({ __proto__, __proto__: 2 })", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({__proto__: a, __proto__: b} = {})", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("export default /foo/", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("l\\u0065t\na", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "let"
                        }
                    },
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "a"
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var await = 0", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 13,
                loc = new TestNode
                {
                    start = new TestNode
                    {
                        line = 1,
                        column = 0
                    },
                    end = new TestNode
                    {
                        line = 1,
                        column = 13
                    }
                },
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(VariableDeclarationNode),
                        start = 0,
                        end = 13,
                        loc = new TestNode
                        {
                            start = new TestNode
                            {
                                line = 1,
                                column = 0
                            },
                            end = new TestNode
                            {
                                line = 1,
                                column = 13
                            }
                        },
                        declarations = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(VariableDeclaratorNode),
                                start = 4,
                                end = 13,
                                loc = new TestNode
                                {
                                    start = new TestNode
                                    {
                                        line = 1,
                                        column = 4
                                    },
                                    end = new TestNode
                                    {
                                        line = 1,
                                        column = 13
                                    }
                                },
                                id = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 4,
                                    end = 9,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 4
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 9
                                        }
                                    },
                                    name = "await"
                                },
                                init = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    start = 12,
                                    end = 13,
                                    loc = new TestNode
                                    {
                                        start = new TestNode
                                        {
                                            line = 1,
                                            column = 12
                                        },
                                        end = new TestNode
                                        {
                                            line = 1,
                                            column = 13
                                        }
                                    },
                                    value = 0,
                                    raw = "0"
                                }
                            }
                        },
                        kind = PropertyKind.Var
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Script,
                allowReserved = AllowReserved.No,
                locations = true
            });
            Program.testFail("var await = 0", "Can not use keyword 'await' outside an async function (1:4)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module,
                allowReserved = AllowReserved.No,
                locations = true
            });

            // https://github.com/acornjs/acorn/issues/363

            Program.test("/[a-z]/gimuy", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            regex = new TestNode
                            {
                                pattern = "[a-z]",
                                flags = "gimuy"
                            }
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("/[a-z]/s", "Invalid regular expression flag (1:1)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("/[a-z]/s", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 8,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 8,
                        expression = new TestNode
                        {
                            type = typeof(LiteralNode),
                            start = 0,
                            end = 8,
                            raw = "/[a-z]/s",
                            regex = new TestNode
                            {
                                pattern = "[a-z]",
                                flags = "s"
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 9
            });

            Program.testFail("[...x in y] = []", "Assigning to rvalue (1:4)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("export let x = a; export function x() {}", "Identifier 'x' has already been declared (1:34)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export let [{x = 2}] = a; export {x}", "Duplicate export 'x' (1:34)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.testFail("export default 100; export default 3", "Duplicate export 'default' (1:27)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("(([,]) => 0)", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(ArrowFunctionExpressionNode),
                            @params = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ArrayPatternNode),
                                    elements = new TestNode[]
                                    {
                                        null
                                    }
                                }
                            },
                            body = new TestNode
                            {
                                type = typeof(LiteralNode),
                                value = 0,
                                raw = "0"
                            },
                            expression = true
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // 'eval' and 'arguments' are not reserved word, but those can not be a BindingIdentifier.

            Program.test("function foo() { return {arguments} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 37,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 37,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 9,
                            end = 12,
                            name = "foo"
                        },
                        generator = false,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 15,
                            end = 37,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ReturnStatementNode),
                                    start = 17,
                                    end = 35,
                                    argument = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        start = 24,
                                        end = 35,
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                start = 25,
                                                end = 34,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 34,
                                                    name = "arguments"
                                                },
                                                kind = PropertyKind.Init,
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 34,
                                                    name = "arguments"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function foo() { return {eval} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 32,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 32,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 9,
                            end = 12,
                            name = "foo"
                        },
                        generator = false,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 15,
                            end = 32,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ReturnStatementNode),
                                    start = 17,
                                    end = 30,
                                    argument = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        start = 24,
                                        end = 30,
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                start = 25,
                                                end = 29,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 29,
                                                    name = "eval"
                                                },
                                                kind = PropertyKind.Init,
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 29,
                                                    name = "eval"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function foo() { 'use strict'; return {arguments} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 51,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 51,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 9,
                            end = 12,
                            name = "foo"
                        },
                        generator = false,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 15,
                            end = 51,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    start = 17,
                                    end = 30,
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        start = 17,
                                        end = 29,
                                        value = "use strict",
                                        raw = "'use strict'"
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(ReturnStatementNode),
                                    start = 31,
                                    end = 49,
                                    argument = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        start = 38,
                                        end = 49,
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                start = 39,
                                                end = 48,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 39,
                                                    end = 48,
                                                    name = "arguments"
                                                },
                                                kind = PropertyKind.Init,
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 39,
                                                    end = 48,
                                                    name = "arguments"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function foo() { 'use strict'; return {eval} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 46,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 46,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 9,
                            end = 12,
                            name = "foo"
                        },
                        generator = false,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 15,
                            end = 46,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    start = 17,
                                    end = 30,
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        start = 17,
                                        end = 29,
                                        value = "use strict",
                                        raw = "'use strict'"
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(ReturnStatementNode),
                                    start = 31,
                                    end = 44,
                                    argument = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        start = 38,
                                        end = 44,
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                start = 39,
                                                end = 43,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 39,
                                                    end = 43,
                                                    name = "eval"
                                                },
                                                kind = PropertyKind.Init,
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 39,
                                                    end = 43,
                                                    name = "eval"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function foo() { return {yield} }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 33,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 33,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 9,
                            end = 12,
                            name = "foo"
                        },
                        generator = false,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 15,
                            end = 33,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ReturnStatementNode),
                                    start = 17,
                                    end = 31,
                                    argument = new TestNode
                                    {
                                        type = typeof(ObjectExpressionNode),
                                        start = 24,
                                        end = 31,
                                        properties = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(PropertyNode),
                                                start = 25,
                                                end = 30,
                                                method = false,
                                                shorthand = true,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 30,
                                                    name = "yield"
                                                },
                                                kind = PropertyKind.Init,
                                                value = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 25,
                                                    end = 30,
                                                    name = "yield"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function foo() { 'use strict'; return {yield} }", "The keyword 'yield' is reserved (1:39)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function foo() { 'use strict'; var {arguments} = {} }", "Binding arguments in strict mode (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function foo() { 'use strict'; var {eval} = {} }", "Binding eval in strict mode (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function foo() { 'use strict'; var {arguments = 1} = {} }", "Binding arguments in strict mode (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function foo() { 'use strict'; var {eval = 1} = {} }", "Binding eval in strict mode (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });

            // cannot use yield expressions in parameters.
            Program.testFail("function* wrap() { function* foo(a = 1 + (yield)) {} }", "Yield expression cannot be a default value (1:42)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function* wrap() { return (a = 1 + (yield)) => a }", "Yield expression cannot be a default value (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });

            // can use yield expressions in parameters if it's inside of a nested generator.
            Program.test("function* foo(a = function*(b) { yield b }) { }", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 47,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 47,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 13,
                            name = "foo"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                start = 14,
                                end = 42,
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 14,
                                    end = 15,
                                    name = "a"
                                },
                                right = new TestNode
                                {
                                    type = typeof(FunctionExpressionNode),
                                    start = 18,
                                    end = 42,
                                    id = null,
                                    generator = true,
                                    expression = false,
                                    @params = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 28,
                                            end = 29,
                                            name = "b"
                                        }
                                    },
                                    body = new TestNode
                                    {
                                        type = typeof(BlockStatementNode),
                                        start = 31,
                                        end = 42,
                                        body = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(ExpressionStatementNode),
                                                start = 33,
                                                end = 40,
                                                expression = new TestNode
                                                {
                                                    type = typeof(YieldExpressionNode),
                                                    start = 33,
                                                    end = 40,
                                                    @delegate = false,
                                                    argument = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        start = 39,
                                                        end = 40,
                                                        name = "b"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 44,
                            end = 47,
                            body = new TestNode[0]
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // 'yield' as function names.

            Program.test("function* yield() {}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 20,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 20,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 15,
                            name = "yield"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 18,
                            end = 20,
                            body = new TestNode[0]
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("({*yield() {}})", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 15,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 15,
                        expression = new TestNode
                        {
                            type = typeof(ObjectExpressionNode),
                            start = 1,
                            end = 14,
                            properties = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(PropertyNode),
                                    start = 2,
                                    end = 13,
                                    method = true,
                                    shorthand = false,
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        start = 3,
                                        end = 8,
                                        name = "yield"
                                    },
                                    kind = PropertyKind.Init,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        start = 8,
                                        end = 13,
                                        id = null,
                                        generator = true,
                                        expression = false,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            start = 11,
                                            end = 13,
                                            body = new TestNode[0]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class A {*yield() {}}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 21,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ClassDeclarationNode),
                        start = 0,
                        end = 21,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 6,
                            end = 7,
                            name = "A"
                        },
                        superClass = null,
                        body = new TestNode
                        {
                            type = typeof(ClassBodyNode),
                            start = 8,
                            end = 21,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(MethodDefinitionNode),
                                    start = 9,
                                    end = 20,
                                    computed = false,
                                    key = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        start = 10,
                                        end = 15,
                                        name = "yield"
                                    },
                                    @static = false,
                                    kind = PropertyKind.Method,
                                    value = new TestNode
                                    {
                                        type = typeof(FunctionExpressionNode),
                                        start = 15,
                                        end = 20,
                                        id = null,
                                        generator = true,
                                        expression = false,
                                        @params = new TestNode[0],
                                        body = new TestNode
                                        {
                                            type = typeof(BlockStatementNode),
                                            start = 18,
                                            end = 20,
                                            body = new TestNode[0]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(function* yield() {})", "Can not use 'yield' as identifier inside a generator (1:11)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function* wrap() {\nfunction* yield() {}\n}", "Can not use 'yield' as identifier inside a generator (2:10)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function* wrap() {\n({*yield() {}})\n}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function* wrap() {\nclass A {*yield() {}}\n}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // Forbid yield expressions in default parameters:
            Program.testFail("function* foo(a = yield b) {}", "Yield expression cannot be a default value (1:18)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(function* foo(a = yield b) {})", "Yield expression cannot be a default value (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("({*foo(a = yield b) {}})", "Yield expression cannot be a default value (1:11)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("(class {*foo(a = yield b) {}})", "Yield expression cannot be a default value (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function* foo(a = class extends (yield b) {}) {}", "Yield expression cannot be a default value (1:33)", new TestOptions
            {
                ecmaVersion = 6
            });

            // Allow yield expressions inside functions in default parameters:
            Program.test("function* foo(a = function* foo() { yield b }) {}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 49,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 49,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 13,
                            name = "foo"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                start = 14,
                                end = 45,
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 14,
                                    end = 15,
                                    name = "a"
                                },
                                right = new TestNode
                                {
                                    type = typeof(FunctionExpressionNode),
                                    start = 18,
                                    end = 45,
                                    id = new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        start = 28,
                                        end = 31,
                                        name = "foo"
                                    },
                                    generator = true,
                                    expression = false,
                                    @params = new TestNode[0],
                                    body = new TestNode
                                    {
                                        type = typeof(BlockStatementNode),
                                        start = 34,
                                        end = 45,
                                        body = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(ExpressionStatementNode),
                                                start = 36,
                                                end = 43,
                                                expression = new TestNode
                                                {
                                                    type = typeof(YieldExpressionNode),
                                                    start = 36,
                                                    end = 43,
                                                    @delegate = false,
                                                    argument = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        start = 42,
                                                        end = 43,
                                                        name = "b"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 47,
                            end = 49,
                            body = new TestNode[0]
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function* foo(a = {*bar() { yield b }}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 42,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 42,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 13,
                            name = "foo"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                start = 14,
                                end = 38,
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 14,
                                    end = 15,
                                    name = "a"
                                },
                                right = new TestNode
                                {
                                    type = typeof(ObjectExpressionNode),
                                    start = 18,
                                    end = 38,
                                    properties = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(PropertyNode),
                                            start = 19,
                                            end = 37,
                                            method = true,
                                            shorthand = false,
                                            computed = false,
                                            key = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                start = 20,
                                                end = 23,
                                                name = "bar"
                                            },
                                            kind = PropertyKind.Init,
                                            value = new TestNode
                                            {
                                                type = typeof(FunctionExpressionNode),
                                                start = 23,
                                                end = 37,
                                                id = null,
                                                generator = true,
                                                expression = false,
                                                @params = new TestNode[0],
                                                body = new TestNode
                                                {
                                                    type = typeof(BlockStatementNode),
                                                    start = 26,
                                                    end = 37,
                                                    body = new TestNode[]
                                                    {
                                                        new TestNode
                                                        {
                                                            type = typeof(ExpressionStatementNode),
                                                            start = 28,
                                                            end = 35,
                                                            expression = new TestNode
                                                            {
                                                                type = typeof(YieldExpressionNode),
                                                                start = 28,
                                                                end = 35,
                                                                @delegate = false,
                                                                argument = new TestNode
                                                                {
                                                                    type = typeof(IdentifierNode),
                                                                    start = 34,
                                                                    end = 35,
                                                                    name = "b"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 40,
                            end = 42,
                            body = new TestNode[0]
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("function* foo(a = class {*bar() { yield b }}) {}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 48,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 48,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 13,
                            name = "foo"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[]
                        {
                            new TestNode
                            {
                                type = typeof(AssignmentPatternNode),
                                start = 14,
                                end = 44,
                                left = new TestNode
                                {
                                    type = typeof(IdentifierNode),
                                    start = 14,
                                    end = 15,
                                    name = "a"
                                },
                                right = new TestNode
                                {
                                    type = typeof(ClassExpressionNode),
                                    start = 18,
                                    end = 44,
                                    id = null,
                                    superClass = null,
                                    body = new TestNode
                                    {
                                        type = typeof(ClassBodyNode),
                                        start = 24,
                                        end = 44,
                                        body = new TestNode[]
                                        {
                                            new TestNode
                                            {
                                                type = typeof(MethodDefinitionNode),
                                                start = 25,
                                                end = 43,
                                                computed = false,
                                                key = new TestNode
                                                {
                                                    type = typeof(IdentifierNode),
                                                    start = 26,
                                                    end = 29,
                                                    name = "bar"
                                                },
                                                @static = false,
                                                kind = PropertyKind.Method,
                                                value = new TestNode
                                                {
                                                    type = typeof(FunctionExpressionNode),
                                                    start = 29,
                                                    end = 43,
                                                    id = null,
                                                    generator = true,
                                                    expression = false,
                                                    @params = new TestNode[0],
                                                    body = new TestNode
                                                    {
                                                        type = typeof(BlockStatementNode),
                                                        start = 32,
                                                        end = 43,
                                                        body = new TestNode[]
                                                        {
                                                            new TestNode
                                                            {
                                                                type = typeof(ExpressionStatementNode),
                                                                start = 34,
                                                                end = 41,
                                                                expression = new TestNode
                                                                {
                                                                    type = typeof(YieldExpressionNode),
                                                                    start = 34,
                                                                    end = 41,
                                                                    @delegate = false,
                                                                    argument = new TestNode
                                                                    {
                                                                        type = typeof(IdentifierNode),
                                                                        start = 40,
                                                                        end = 41,
                                                                        name = "b"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 46,
                            end = 48,
                            body = new TestNode[0]
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            // Distinguish ParenthesizedExpression or ArrowFunctionExpression
            Program.test("function* wrap() {\n(a = yield b)\n}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 34,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 34,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 14,
                            name = "wrap"
                        },
                        generator = true,
                        expression = false,
                        @params = new TestNode[0],
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 17,
                            end = 34,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    start = 19,
                                    end = 32,
                                    expression = new TestNode
                                    {
                                        type = typeof(AssignmentExpressionNode),
                                        start = 20,
                                        end = 31,
                                        @operator = "=",
                                        left = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 20,
                                            end = 21,
                                            name = "a"
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(YieldExpressionNode),
                                            start = 24,
                                            end = 31,
                                            @delegate = false,
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                start = 30,
                                                end = 31,
                                                name = "b"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("function* wrap() {\n(a = yield b) => a\n}", "Yield expression cannot be a default value (2:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function* wrap() {\n({a = yield b} = obj)\n}", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 42,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        start = 0,
                        end = 42,
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 10,
                            end = 14,
                            name = "wrap"
                        },
                        @params = new TestNode[0],
                        generator = true,
                        expression = false,
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            start = 17,
                            end = 42,
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    start = 19,
                                    end = 40,
                                    expression = new TestNode
                                    {
                                        type = typeof(AssignmentExpressionNode),
                                        start = 20,
                                        end = 39,
                                        @operator = "=",
                                        left = new TestNode
                                        {
                                            type = typeof(ObjectPatternNode),
                                            start = 20,
                                            end = 33,
                                            properties = new TestNode[]
                                            {
                                                new TestNode
                                                {
                                                    type = typeof(PropertyNode),
                                                    start = 21,
                                                    end = 32,
                                                    method = false,
                                                    shorthand = true,
                                                    computed = false,
                                                    key = new TestNode
                                                    {
                                                        type = typeof(IdentifierNode),
                                                        start = 21,
                                                        end = 22,
                                                        name = "a"
                                                    },
                                                    kind = PropertyKind.Init,
                                                    value = new TestNode
                                                    {
                                                        type = typeof(AssignmentPatternNode),
                                                        start = 21,
                                                        end = 32,
                                                        left = new TestNode
                                                        {
                                                            type = typeof(IdentifierNode),
                                                            start = 21,
                                                            end = 22,
                                                            name = "a"
                                                        },
                                                        right = new TestNode
                                                        {
                                                            type = typeof(YieldExpressionNode),
                                                            start = 25,
                                                            end = 32,
                                                            @delegate = false,
                                                            argument = new TestNode
                                                            {
                                                                type = typeof(IdentifierNode),
                                                                start = 31,
                                                                end = 32,
                                                                name = "b"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        right = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 36,
                                            end = 39,
                                            name = "obj"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("export default class Foo {}++x", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExportDefaultDeclarationNode),
                        declaration = new TestNode
                        {
                            type = typeof(ClassDeclarationNode),
                            id = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "Foo"
                            },
                            superClass = null,
                            body = new TestNode
                            {
                                type = typeof(ClassBodyNode),
                                body = new TestNode[0]
                            }
                        }
                    },
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(UpdateExpressionNode),
                            @operator = "++",
                            prefix = true,
                            argument = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                name = "x"
                            }
                        }
                    }
                },
                sourceType = SourceType.Module
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });


            Program.test("function *f() { yield\n{}/1/g\n}", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(FunctionDeclarationNode),
                        id = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            name = "f"
                        },
                        body = new TestNode
                        {
                            type = typeof(BlockStatementNode),
                            body = new TestNode[]
                            {
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(YieldExpressionNode),
                                        argument = null,
                                        @delegate = false
                                    }
                                },
                                new TestNode
                                {
                                    type = typeof(BlockStatementNode),
                                    body = new TestNode[0]
                                },
                                new TestNode
                                {
                                    type = typeof(ExpressionStatementNode),
                                    expression = new TestNode
                                    {
                                        type = typeof(LiteralNode),
                                        raw = "/1/g",
                                        regex = new TestNode
                                        {
                                            pattern = "1",
                                            flags = "g"
                                        }
                                    }
                                }
                            }
                        },
                        generator = true
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("class B { constructor(a = super()) { return a }}", "super() call outside constructor of a subclass (1:26)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class B extends A { constructor(a = super()) { return a }}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class B { foo(a = super.foo()) { return a }}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function* wrap() {\n({a = yield b} = obj) => a\n}", "Yield expression cannot be a default value (2:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            // invalid syntax '*foo: 1'
            Program.testFail("({*foo: 1})", "Unexpected token (1:6)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("export { x as y } from './y.js';\nexport { x as z } from './z.js';",
                new TestNode
                {
                }, new TestOptions
                {
                    sourceType = SourceType.Module,
                    ecmaVersion = 6
                });

            Program.test("export { default as y } from './y.js';\nexport default 42;",
                new TestNode
                {
                }, new TestOptions
                {
                    sourceType = SourceType.Module,
                    ecmaVersion = 6
                });

            Program.testFail("export { default} from './y.js';\nexport default 42;",
                "Duplicate export 'default' (2:7)",
                new TestOptions
                {
                    sourceType = SourceType.Module,
                    ecmaVersion = 6
                });
            Program.testFail("export * from foo", "Unexpected token (1:14)", new TestOptions
            {
                sourceType = SourceType.Module,
                ecmaVersion = 6,
                loose = false
            });
            Program.testFail("export { bar } from foo", "Unexpected token (1:20)", new TestOptions
            {
                sourceType = SourceType.Module,
                ecmaVersion = 6,
                loose = false
            });

            Program.testFail("foo: class X {}", "Invalid labeled declaration (1:5)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("'use strict'; bar: function x() {}", "Invalid labeled declaration (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({x, y}) = {}", "Parenthesized pattern (1:0)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("[x, (y), {z, u: (v)}] = foo", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("export default function(x) {};", new TestNode
            {
                body = new TestNode[]
                {
                    new TestNode
                    {
                    },
                    new TestNode
                    {
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("{ var foo = 1; let foo = 1; }", "Identifier 'foo' has already been declared (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let foo = 1; var foo = 1;", "Identifier 'foo' has already been declared (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:17)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var foo = 1; const foo = 1;", "Identifier 'foo' has already been declared (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("const foo = 1; var foo = 1;", "Identifier 'foo' has already been declared (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var [foo] = [1]; let foo = 1;", "Identifier 'foo' has already been declared (1:21)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var [{ bar: [foo] }] = x; let {foo} = 1;", "Identifier 'foo' has already been declared (1:31)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (x) var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:24)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (x) {} else var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:32)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (x) var foo = 1; else {} let foo = 1;", "Identifier 'foo' has already been declared (1:32)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (x) {} else if (y) {} else var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:47)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("while (x) var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:27)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("do var foo = 1; while (x) let foo = 1;", "Identifier 'foo' has already been declared (1:30)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (;;) var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:26)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (const x of y) var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (const x in y) var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("label: var foo = 1; let foo = 1;", "Identifier 'foo' has already been declared (1:24)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("switch (x) { case 0: var foo = 1 } let foo = 1;", "Identifier 'foo' has already been declared (1:39)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("try { var foo = 1; } catch (e) {} let foo = 1;", "Identifier 'foo' has already been declared (1:38)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function foo() {} let foo = 1;", "Identifier 'foo' has already been declared (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("{ var foo = 1; } let foo = 1;", "Identifier 'foo' has already been declared (1:21)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let foo = 1; { var foo = 1; }", "Identifier 'foo' has already been declared (1:19)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("let foo = 1; function x(foo) {} { var foo = 1; }", "Identifier 'foo' has already been declared (1:38)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("if (x) { if (y) var foo = 1; } let foo = 1;", "Identifier 'foo' has already been declared (1:35)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var foo = 1; function x() {} let foo = 1;", "Identifier 'foo' has already been declared (1:33)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("{ let foo = 1; { let foo = 2; } let foo = 1; }", "Identifier 'foo' has already been declared (1:36)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (var foo of y) {} let foo = 1;", "Identifier 'foo' has already been declared (1:26)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("function x(foo) { let foo = 1; }", "Identifier 'foo' has already been declared (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var [...foo] = x; let foo = 1;", "Identifier 'foo' has already been declared (1:22)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("foo => { let foo; }", "Identifier 'foo' has already been declared (1:13)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("({ x(foo) { let foo; } })", "Identifier 'foo' has already been declared (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("try {} catch (foo) { let foo = 1; }", "Identifier 'foo' has already been declared (1:25)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var foo = 1; var foo = 1;", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("if (x) var foo = 1; var foo = 1;", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function x() { var foo = 1; } let foo = 1;", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function foo() { let foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var foo = 1; { let foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("{ let foo = 1; { let foo = 2; } }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("var foo; try {} catch (_) { let foo; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let x = 1; function foo(x) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (let i = 0;;); for (let i = 0;;);", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (const foo of bar); for (const foo of bar);", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (const foo in bar); for (const foo in bar);", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (let foo in bar) { let foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (let foo of bar) { let foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class Foo { method(foo) {} method2() { let foo; } }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("() => { let foo; }; foo => {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("() => { let foo; }; () => { let foo; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("switch(x) { case 1: let foo = 1; } let foo = 1;", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("'use strict'; function foo() { let foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let foo = 1; function x() { var foo = 1; }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("[...foo, bar = 1]", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (var a of /b/) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (var {a} of /b/) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (let {a} of /b/) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("for (const {a} of /b/) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function* bar() { yield /re/ }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function* bar() { yield class {} }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("() => {}\n/re/", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(() => {}) + 2", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("(x) => {} + 2", "Unexpected token (1:10)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function *f1() { function g() { return yield / 1 } }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("class Foo {} /regexp/", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("(class Foo {} / 2)", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("1 <!--b", new TestNode
            {
                type = typeof(ProgramNode),
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        expression = new TestNode
                        {
                            type = typeof(BinaryExpressionNode),
                            @operator = "<"
                        }
                    }
                }
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.testFail("class A extends B { constructor() { super } }", "Unexpected token (1:42)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class A extends B { constructor() { super; } }", "Unexpected token (1:41)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class A extends B { constructor() { (super)() } }", "Unexpected token (1:42)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.testFail("class A extends B { foo() { (super).foo } }", "Unexpected token (1:34)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("({super: 1})", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("import {super as a} from 'a'", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.test("export {a as super}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });
            Program.test("let instanceof Foo", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 18,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 18,
                        expression = new TestNode
                        {
                            type = typeof(BinaryExpressionNode),
                            start = 0,
                            end = 18,
                            left = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 0,
                                end = 3,
                                name = "let"
                            },
                            @operator = "instanceof",
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 15,
                                end = 18,
                                name = "Foo"
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function fn({__proto__: a, __proto__: b}) {}", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (let x of y, z) {}", "Unexpected token (1:15)", new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("[...foo, bar] = b", "Comma is not permitted after the rest element (1:7)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("[...a, x][1] = b", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 16,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ExpressionStatementNode),
                        start = 0,
                        end = 16,
                        expression = new TestNode
                        {
                            type = typeof(AssignmentExpressionNode),
                            start = 0,
                            end = 16,
                            @operator = "=",
                            left = new TestNode
                            {
                                type = typeof(MemberExpressionNode),
                                start = 0,
                                end = 12,
                                @object = new TestNode
                                {
                                    type = typeof(ArrayExpressionNode),
                                    start = 0,
                                    end = 9,
                                    elements = new TestNode[]
                                    {
                                        new TestNode
                                        {
                                            type = typeof(SpreadElementNode),
                                            start = 1,
                                            end = 5,
                                            argument = new TestNode
                                            {
                                                type = typeof(IdentifierNode),
                                                start = 4,
                                                end = 5,
                                                name = "a"
                                            }
                                        },
                                        new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 7,
                                            end = 8,
                                            name = "x"
                                        }
                                    }
                                },
                                property = new TestNode
                                {
                                    type = typeof(LiteralNode),
                                    start = 10,
                                    end = 11,
                                    value = 1,
                                    raw = "1"
                                },
                                computed = true
                            },
                            right = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 15,
                                end = 16,
                                name = "b"
                            }
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("for (let [...foo, bar] in qux);", "Comma is not permitted after the rest element (1:16)", new TestOptions
            {
                ecmaVersion = 6
            });
            Program.test("for ([...foo, bar].baz in qux);", new TestNode
            {
                type = typeof(ProgramNode),
                start = 0,
                end = 31,
                body = new TestNode[]
                {
                    new TestNode
                    {
                        type = typeof(ForInStatementNode),
                        start = 0,
                        end = 31,
                        left = new TestNode
                        {
                            type = typeof(MemberExpressionNode),
                            start = 5,
                            end = 22,
                            @object = new TestNode
                            {
                                type = typeof(ArrayExpressionNode),
                                start = 5,
                                end = 18,
                                elements = new TestNode[]
                                {
                                    new TestNode
                                    {
                                        type = typeof(SpreadElementNode),
                                        start = 6,
                                        end = 12,
                                        argument = new TestNode
                                        {
                                            type = typeof(IdentifierNode),
                                            start = 9,
                                            end = 12,
                                            name = "foo"
                                        }
                                    },
                                    new TestNode
                                    {
                                        type = typeof(IdentifierNode),
                                        start = 14,
                                        end = 17,
                                        name = "bar"
                                    }
                                }
                            },
                            property = new TestNode
                            {
                                type = typeof(IdentifierNode),
                                start = 19,
                                end = 22,
                                name = "baz"
                            },
                            computed = false
                        },
                        right = new TestNode
                        {
                            type = typeof(IdentifierNode),
                            start = 26,
                            end = 29,
                            name = "qux"
                        },
                        body = new TestNode
                        {
                            type = typeof(EmptyStatementNode),
                            start = 30,
                            end = 31
                        }
                    }
                },
                sourceType = SourceType.Script
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.testFail("var f;\nfunction f() {}", "Identifier 'f' has already been declared (2:9)", new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("function f() { var x; function x() {} }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6,
                sourceType = SourceType.Module
            });

            Program.test("a.of / 2", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("let x = 1; x = 2", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("function *f2() { () => yield / 1 }", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });

            Program.test("({ a = 42, b: c.d } = e)", new TestNode
            {
            }, new TestOptions
            {
                ecmaVersion = 6
            });
        }
    }
}
